"<br/> <b> Type:</b>", type,
"<br/> <b> Location Description:</b>", locality
))
# threshold map palette
pal <- colorNumeric(palette = c('#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026'),
domain = values(thres),
na.color = "transparent")
m1 <- leaflet()%>%
addTiles()%>%
addMapPane("dsitribution", zIndex = 410) %>%
addMapPane("points", zIndex = 420) %>%
addLayersControl(
overlayGroups = c("Distribution", "Occurances"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addRasterImage(raster(thres),
colors = pal,
opacity = 0.8,
group = "Distribution") %>%
leaflet::addCircles(data = speciesData,
color = ~color,
group = "Occurances",
popup = ~popup,
opacity = 1
)%>%
addLegend(pal = pal, values = values(thres),
title = "Probability of suitable habitat")%>%
addControl(speciesName, position = "bottomleft")
saveWidget(m1,
file=paste0("data/basicMaps/",speciesName,"_",Sys.Date(),".html"),
selfcontained = TRUE)
speciesData
species
# species subset
species <- species[c(54,50,14,8)]
basicMap <- function(thres,speciesData ){
speciesName <- speciesData$taxon[1]
# Assign color to occurrence data
speciesData <- speciesData %>%
mutate(color = case_when(
type  == "H" ~ "#4ca258",
type == "G" ~ "#54278f"
),
popup = paste0(
"<b>Data Source:</b>", databaseSource,
"<br/> <b> Record ID:</b>", record_identifyer,
"<br/> <b> Type:</b>", type,
"<br/> <b> Location Description:</b>", locality
))
# threshold map palette
pal <- colorNumeric(palette = c('#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026'),
domain = values(thres),
na.color = "transparent")
m1 <- leaflet()%>%
addTiles()%>%
addMapPane("dsitribution", zIndex = 410) %>%
addMapPane("points", zIndex = 420) %>%
addLayersControl(
overlayGroups = c("Distribution", "Occurances"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addRasterImage(raster(thres),
colors = pal,
opacity = 0.8,
group = "Distribution") %>%
leaflet::addCircles(data = speciesData,
color = ~color,
group = "Occurances",
popup = ~popup,
opacity = 1
)%>%
addLegend(pal = pal, values = values(thres),
title = "Probability of suitable habitat")%>%
addControl(speciesName, position = "bottomleft")
saveWidget(m1,
file=paste0("data/basicMaps/",speciesName,"_",Sys.Date(),".html"),
selfcontained = TRUE)
}
species
species <- sort(unique(speciesData$taxon))
speciesData
species
species <- sort(unique(speciesData$taxon))
species
# input datasets ----------------------------------------------------------
## species observations
speciesData <- read_csv("data/raw_occurances/daucusData_BioClimatic_2.5arc_modified.csv")
# primary loop ------------------------------------------------------------
genera <- unique(speciesData$genus)
species <- sort(unique(speciesData$taxon))
species
# species subset
species <- species[c(54,51,14,8)]
species
# Daucus_aureus is species[1] is a reasonable one for troubleshooting
for(i in genera){
print(i)
#create folder
dir1 <- paste0("data/",genera)
if(!dir.exists(dir1)){dir.create(dir1)}
# loop over species  ------------------------------------------------------
for(j in species){
print(j)
dir2 <- paste0(dir1,"/",j)
if(!dir.exists(dir2)){dir.create(dir2)}
dirs <- paste0(
dir2,"/", runVersion ,"/", c("gap_analysis", "occurances", "results")
)
for(k in dirs){
if(!dir.exists(k))
{dir.create(k,recursive = T)}
}
# process data
## species specific data
sd1 <- subsetSpecies(occuranceData =speciesData, species = j )
## counts data
c1 <- generateCounts(speciesData = sd1)
## spatial object
sp1 <- createSF_Objects(speciesData = sd1) %>%
removeDuplicates()
#srsex
srsex <- srs_exsitu(sp_counts = c1)
## define natural area based on ecoregions
natArea <-nat_area_shp(speciesPoints = sp1, ecoregions = ecoregions)
## at some point we're going to need to filter this out. I don't know if this
## is the right time or not.
if(nrow(sp1) >=5 ){
## define number of background points
b_Number <- numberBackground(natArea = natArea)
## generate GA50 objects
g_buffer <- create_buffers(
speciesPoints = sp1,
natArea = natArea,
bufferDist = bufferDist,
templateRast = templateRast
)
## associate observations with bioclim data
m_data <- generateModelData(speciesPoints = sp1,
natArea = natArea,
bioVars = bioVars,
b_Number = b_Number)
## perform variable selection
v_data <- varaibleSelection(modelData = m_data)
## prepare data for maxent model
rasterInputs <- cropRasters(
natArea = natArea,
bioVars = bioVars,
selectVars = v_data
)
## perform maxent model
sdm_results <- runMaxnet(selectVars = v_data,
rasterData = rasterInputs)
## generatre summary raster images
projectsResults <- rasterResults(sdm_result)
## generate evaluationTable
evalTable <- evaluateTable(sdm_result = sdm_results)
## generate threshold rasters
thres <- generateThresholdModel(evalTable = evalTable,
rasterResults = projectsResults)
## generate a mess map
## generate a kernal density map
## crop GA50 to threshold area
g_bufferCrop <- cropG_Buffer(ga50 = g_buffer, thres = thres)
# Gap Analysis Methods  ---------------------------------------------------
# insitu
## srsin
## ersin
## grsin
## fcsin
#exsitu
##ersex
ersex <- ers_exsitu(speciesData = sd1, thres = thres, natArea = natArea,
ga50 = g_bufferCrop)
##grsex
grsex <- grs_exsitu(speciesData = sd1, ga50 = g_bufferCrop, thres = thres)
##fcsex
fcsex <- fcs_exsitu(srsex = srsex,grsex = grsex,ersex = ersex)
## basic summary maps
basicMap(thres = thres, speciesData = sp1)
# Export the data ---------------------------------------------------------
## add to the export
## - GRSex, g_bufferCrop, ERSex, FCSex
writeData(overwrite = overwrite,
dirs = dirs,
c1 = c1,
sp1 = sp1,
srsex = srsex,
natArea = natArea,
g_buffer = g_buffer,
rasterResults = projectsResults,
evalTable = evalTable,
thres = thres,
g_bufferMask = g_bufferCrop,
grsex = grsex,
ersex = ersex,
fcsex = fcsex)
# remove all reused variables ---------------------------------------------
rm(c1,sp1,srsex,natArea,g_buffer, projectsResults,evalTable,thres)
}
}# end of species loop
}
j
species
sp1
unique(sp1$type)
## generate GA50 objects
g_buffer <- create_buffers(
speciesPoints = sp1,
natArea = natArea,
bufferDist = bufferDist,
templateRast = templateRast
)
## associate observations with bioclim data
m_data <- generateModelData(speciesPoints = sp1,
natArea = natArea,
bioVars = bioVars,
b_Number = b_Number)
## generatre summary raster images
projectsResults <- rasterResults(sdm_result)
## generate evaluationTable
evalTable <- evaluateTable(sdm_result = sdm_results)
## generate threshold rasters
thres <- generateThresholdModel(evalTable = evalTable,
rasterResults = projectsResults)
## crop GA50 to threshold area
g_bufferCrop <- cropG_Buffer(ga50 = g_buffer, thres = thres)
g_buffer
class(g_buffer)
#' crop G buffer.
#'
#' @param ga50
#' @param thres
#'
#' @return Trim gbuffer object that will be used within the
cropG_Buffer<-function(ga50, thres){
if(class(ga50) != "character"){
thres[thres==0] <- NA
ga50_mask <- ga50 * thres
}else{
ga50_mask <-  "there are no g points for this species"
}
return(ga50_mask)
}
## crop GA50 to threshold area
g_bufferCrop <- cropG_Buffer(ga50 = g_buffer, thres = thres)
## basic summary maps
basicMap(thres = thres, speciesData = sp1)
sp1
basicMap <- function(thres,occurances ){
speciesName <- occurances$taxon[1]
# Assign color to occurrence data
occurances <- occurances %>%
mutate(color = case_when(
type  == "H" ~ "#4ca258",
type == "G" ~ "#54278f"
),
popup = paste0(
"<b>Data Source:</b>", databaseSource,
"<br/> <b> Record ID:</b>", record_identifyer,
"<br/> <b> Type:</b>", type,
"<br/> <b> Location Description:</b>", locality
))
# threshold map palette
pal <- colorNumeric(palette = c('#ffffb2','#fecc5c','#fd8d3c','#f03b20','#bd0026'),
domain = values(thres),
na.color = "transparent")
m1 <- leaflet()%>%
addTiles()%>%
addMapPane("dsitribution", zIndex = 410) %>%
addMapPane("points", zIndex = 420) %>%
addLayersControl(
overlayGroups = c("Distribution", "Occurances"),
options = layersControlOptions(collapsed = FALSE)
)%>%
addRasterImage(raster(thres),
colors = pal,
opacity = 0.8,
group = "Distribution") %>%
leaflet::addCircles(data = occurances,
color = ~color,
group = "Occurances",
popup = ~popup,
opacity = 1
)%>%
addLegend(pal = pal, values = values(thres),
title = "Probability of suitable habitat")%>%
addControl(speciesName, position = "bottomleft")
saveWidget(m1,
file=paste0("data/basicMaps/",speciesName,"_",Sys.Date(),".html"),
selfcontained = TRUE)
}
## basic summary maps
basicMap(thres = thres, speciesData = sp1)
## basic summary maps
basicMap(thres = thres, occurances = sp1)
species
# species subset
species <- species[c(14,8)]
print(i)
#create folder
dir1 <- paste0("data/",genera)
if(!dir.exists(dir1)){dir.create(dir1)}
# loop over species  ------------------------------------------------------
for(j in species){
print(j)
dir2 <- paste0(dir1,"/",j)
if(!dir.exists(dir2)){dir.create(dir2)}
dirs <- paste0(
dir2,"/", runVersion ,"/", c("gap_analysis", "occurances", "results")
)
for(k in dirs){
if(!dir.exists(k))
{dir.create(k,recursive = T)}
}
# process data
## species specific data
sd1 <- subsetSpecies(occuranceData =speciesData, species = j )
## counts data
c1 <- generateCounts(speciesData = sd1)
## spatial object
sp1 <- createSF_Objects(speciesData = sd1) %>%
removeDuplicates()
#srsex
srsex <- srs_exsitu(sp_counts = c1)
## define natural area based on ecoregions
natArea <-nat_area_shp(speciesPoints = sp1, ecoregions = ecoregions)
## at some point we're going to need to filter this out. I don't know if this
## is the right time or not.
if(nrow(sp1) >=5 ){
## define number of background points
b_Number <- numberBackground(natArea = natArea)
## generate GA50 objects
g_buffer <- create_buffers(
speciesPoints = sp1,
natArea = natArea,
bufferDist = bufferDist,
templateRast = templateRast
)
## associate observations with bioclim data
m_data <- generateModelData(speciesPoints = sp1,
natArea = natArea,
bioVars = bioVars,
b_Number = b_Number)
## perform variable selection
v_data <- varaibleSelection(modelData = m_data)
## prepare data for maxent model
rasterInputs <- cropRasters(
natArea = natArea,
bioVars = bioVars,
selectVars = v_data
)
## perform maxent model
sdm_results <- runMaxnet(selectVars = v_data,
rasterData = rasterInputs)
## generatre summary raster images
projectsResults <- rasterResults(sdm_result)
## generate evaluationTable
evalTable <- evaluateTable(sdm_result = sdm_results)
## generate threshold rasters
thres <- generateThresholdModel(evalTable = evalTable,
rasterResults = projectsResults)
## generate a mess map
## generate a kernal density map
## crop GA50 to threshold area
g_bufferCrop <- cropG_Buffer(ga50 = g_buffer, thres = thres)
# Gap Analysis Methods  ---------------------------------------------------
# insitu
## srsin
## ersin
## grsin
## fcsin
#exsitu
##ersex
ersex <- ers_exsitu(speciesData = sd1, thres = thres, natArea = natArea,
ga50 = g_bufferCrop)
##grsex
grsex <- grs_exsitu(speciesData = sd1, ga50 = g_bufferCrop, thres = thres)
##fcsex
fcsex <- fcs_exsitu(srsex = srsex,grsex = grsex,ersex = ersex)
## basic summary maps
basicMap(thres = thres, occurances = sp1)
# Export the data ---------------------------------------------------------
## add to the export
## - GRSex, g_bufferCrop, ERSex, FCSex
writeData(overwrite = overwrite,
dirs = dirs,
c1 = c1,
sp1 = sp1,
srsex = srsex,
natArea = natArea,
g_buffer = g_buffer,
rasterResults = projectsResults,
evalTable = evalTable,
thres = thres,
g_bufferMask = g_bufferCrop,
grsex = grsex,
ersex = ersex,
fcsex = fcsex)
# remove all reused variables ---------------------------------------------
rm(c1,sp1,srsex,natArea,g_buffer, projectsResults,evalTable,thres)
}
}# end of species loop
j
species
species <- sort(unique(speciesData$taxon))
# species subset
species <- species[c(14,8)]
species
print(i)
#create folder
dir1 <- paste0("data/",genera)
if(!dir.exists(dir1)){dir.create(dir1)}
# loop over species  ------------------------------------------------------
for(j in species){
print(j)
dir2 <- paste0(dir1,"/",j)
if(!dir.exists(dir2)){dir.create(dir2)}
dirs <- paste0(
dir2,"/", runVersion ,"/", c("gap_analysis", "occurances", "results")
)
for(k in dirs){
if(!dir.exists(k))
{dir.create(k,recursive = T)}
}
# process data
## species specific data
sd1 <- subsetSpecies(occuranceData =speciesData, species = j )
## counts data
c1 <- generateCounts(speciesData = sd1)
## spatial object
sp1 <- createSF_Objects(speciesData = sd1) %>%
removeDuplicates()
#srsex
srsex <- srs_exsitu(sp_counts = c1)
## define natural area based on ecoregions
natArea <-nat_area_shp(speciesPoints = sp1, ecoregions = ecoregions)
## at some point we're going to need to filter this out. I don't know if this
## is the right time or not.
if(nrow(sp1) >=5 ){
## define number of background points
b_Number <- numberBackground(natArea = natArea)
## generate GA50 objects
g_buffer <- create_buffers(
speciesPoints = sp1,
natArea = natArea,
bufferDist = bufferDist,
templateRast = templateRast
)
## associate observations with bioclim data
m_data <- generateModelData(speciesPoints = sp1,
natArea = natArea,
bioVars = bioVars,
b_Number = b_Number)
## perform variable selection
v_data <- varaibleSelection(modelData = m_data)
## prepare data for maxent model
rasterInputs <- cropRasters(
natArea = natArea,
bioVars = bioVars,
selectVars = v_data
)
## perform maxent model
sdm_results <- runMaxnet(selectVars = v_data,
rasterData = rasterInputs)
## generatre summary raster images
projectsResults <- rasterResults(sdm_result)
## generate evaluationTable
evalTable <- evaluateTable(sdm_result = sdm_results)
## generate threshold rasters
thres <- generateThresholdModel(evalTable = evalTable,
rasterResults = projectsResults)
## generate a mess map
## generate a kernal density map
## crop GA50 to threshold area
g_bufferCrop <- cropG_Buffer(ga50 = g_buffer, thres = thres)
# Gap Analysis Methods  ---------------------------------------------------
# insitu
## srsin
## ersin
## grsin
## fcsin
#exsitu
##ersex
ersex <- ers_exsitu(speciesData = sd1, thres = thres, natArea = natArea,
ga50 = g_bufferCrop)
##grsex
grsex <- grs_exsitu(speciesData = sd1, ga50 = g_bufferCrop, thres = thres)
##fcsex
fcsex <- fcs_exsitu(srsex = srsex,grsex = grsex,ersex = ersex)
## basic summary maps
basicMap(thres = thres, occurances = sp1)
# Export the data ---------------------------------------------------------
## add to the export
## - GRSex, g_bufferCrop, ERSex, FCSex
writeData(overwrite = overwrite,
dirs = dirs,
c1 = c1,
sp1 = sp1,
srsex = srsex,
natArea = natArea,
g_buffer = g_buffer,
rasterResults = projectsResults,
evalTable = evalTable,
thres = thres,
g_bufferMask = g_bufferCrop,
grsex = grsex,
ersex = ersex,
fcsex = fcsex)
# remove all reused variables ---------------------------------------------
rm(c1,sp1,srsex,natArea,g_buffer, projectsResults,evalTable,thres)
}
}# end of species loop
