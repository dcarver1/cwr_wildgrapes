## raster objects
projectsResults <- write_RDS(path = allPaths$modeledRasters,
overwrite = overwrite,
function1 = rasterResults(sdm_result))
## generate evaluationTable
evalTable <- write_CSV(path = allPaths$evalTablePath,
overwrite = overwrite,
function1 = evaluateTable(sdm_result = sdm_results))
## generate threshold rasters
thres <- write_Rast(path =  allPaths$thresPath,
overwrite = overwrite,
function1 = generateThresholdModel(evalTable = evalTable,
rasterResults = projectsResults))
## generate a mess map
## generate a kernal density map
## crop GA50 to threshold area
g_bufferCrop <- write_Rast(path = allPaths$g50_bufferPath,
overwrite = overwrite,
function1 = cropG_Buffer(ga50 = g_buffer,
thres = thres))
# Gap Analysis Methods  ---------------------------------------------------
# insitu
## srsin
srsin <- write_CSV(path = allPaths$srsinPath,
overwrite = overwrite,
function1 = srs_insitu(occuranceData = sp1,
thres = thres,
protectedArea =protectedAreas ))
## ersin
ersin <- write_CSV(path = allPaths$ersinPath,
overwrite = overwrite,
function1 = ers_insitu(occuranceData = sp1,
nativeArea = natArea,
protectedArea = protectedAreas,
thres = thres,
rasterPath = allPaths$ersinRast))
## grsin
grsin <-  write_CSV(path = allPaths$grsinPath,
overwrite = overwrite ,
function1 = grs_insitu(occuranceData = sp1,
protectedArea = protectedAreas,
thres = thres))
## fcsin
fcsin <- write_CSV(path = allPaths$fcsinPath,
overwrite = overwrite ,
function1 = fcs_insitu(srsin = srsin,
grsin = grsin,
ersin = ersin,
noModel = FALSE
))
#exsitu
##ersex
ersex <- write_CSV(path = allPaths$ersexPath,
overwrite = TRUE,
function1 = ers_exsitu(speciesData = sd1,
thres = thres,
natArea = natArea,
ga50 = g_bufferCrop,
rasterPath = allPaths$ersexRast))
##grsex
grsex <- write_CSV(path = allPaths$grsexPath,
overwrite = overwrite,
function1 = grs_exsitu(speciesData = sd1,
ga50 = g_bufferCrop,
thres = thres))
##fcsex
fcsex <- write_CSV(path = allPaths$fcsexPath,
overwrite = TRUE,
function1 = fcs_exsitu(srsex = srsex,
grsex = grsex,
ersex = ersex,
noModel = FALSE))
#combined measure
fcsCombined <- write_CSV(path = allPaths$fcsCombinedPath,
overwrite = TRUE,
function1 = fcs_combine(fcsin = fcsin,
fcsex = fcsex))
#gather features for RMD
## just a helper function to reduce the number of input for the RMD
reportData <- write_RDS(path = allPaths$summaryDataPath,
overwrite = TRUE,
function1 = grabData(fscCombined = fcsCombined,
ersex = ersex,
fcsex = fcsex,
fcsin = fcsin,
evalTable = evalTable,
g_bufferCrop = g_bufferCrop,
thres = thres,
projectsResults = projectsResults,
occuranceData = sp1,
v_data = v_data,
g_buffer = g_buffer,
natArea = natArea,
protectedAreas = protectedAreas,
countsData = c1,
variableImportance = allPaths$variablbeSelectPath,
NoModel = FALSE))
}else{ # no sdm results
erroredSpecies$noSDM <- c(erroredSpecies$noSDM, j)
print("conservation Metrics")
#Complete conservation assessments without models
## srsin
srsin <- write_CSV(path = allPaths$srsinPath,
overwrite = overwrite,
function1 = srs_insitu(occuranceData = sp1,
thres = NA,
protectedArea =protectedAreas ))
## fcsin
fcsin <- write_CSV(path = allPaths$fcsinPath,
overwrite = overwrite,
function1 = fcs_insitu(srsin = srsin,
grsin = grsin,
ersin = ersin,
noModel = TRUE))
##fcsex
fcsex <- write_CSV(path = allPaths$fcsexPath,
overwrite = overwrite,
function1 = fcs_exsitu(srsex = srsex,
grsex = grsex,
ersex = ersex,
noModel = TRUE))
#combined measure
fcsCombined <- write_CSV(path = allPaths$fcsCombinedPath,
overwrite = overwrite,
function1 = fcs_combine(fcsin = fcsin,
fcsex = fcsex))
# generate report data for species
reportData <- write_RDS(path = allPaths$summaryDataPath,
overwrite = TRUE,
function1 = grabData(fscCombined = fcsCombined,
ersex = NA,
fcsex = fcsex,
fcsin = fcsin,
evalTable = NA,
g_bufferCrop = NA,
thres = NA,
projectsResults = NA,
occuranceData = sp1,
v_data = NA,
g_buffer = NA,
natArea = natArea,
protectedAreas = protectedAreas,
countsData = c1,
variableImportance = allPaths$variablbeSelectPath,
NoModel = TRUE))
}
}else{ # end of attempt to model
erroredSpecies$lessThenEight <- c(erroredSpecies$lessThenEight, j)
### need the FCS summary data for the full run summary
## srsin can be calculated for all species with at least one lat lon value
## if no model is present (GRSin and ERSin are NA)
## if no G points are present (srsex, grsex, and ersex are 0)
## if g Points present but no model (srsex is calculated, grsex, and ersex are NA )
# pull n G points from
gPoints <- c1$totalGUseful
#
srsin <- write_CSV(path = allPaths$srsinPath,
overwrite = overwrite,
function1 = srs_insitu(occuranceData = sp1,
thres = NA,
protectedArea =protectedAreas ))
fcsin <- write_CSV(path = allPaths$fcsinPath,
overwrite = overwrite,
function1 = fcs_insitu(srsin = srsin,
grsin = grsin,
ersin = ersin,
noModel = TRUE))
##fcsex
fcsex <- write_CSV(path = allPaths$fcsexPath,
overwrite = overwrite,
function1 = fcs_exsitu(srsex = srsex,
grsex = grsex,
ersex = ersex,
noModel = TRUE,
gPoints = gPoints))
#combined measure
fcsCombined <- write_CSV(path = allPaths$fcsCombinedPath,
overwrite = overwrite,
function1 = fcs_combine(fcsin = fcsin,
fcsex = fcsex))
reportData <- write_RDS(path = allPaths$summaryDataPath,
overwrite = TRUE,
function1 = grabData(fscCombined = fcsCombined,
ersex = NA,
fcsex = fcsex,
fcsin = fcsin,
evalTable = NA,
g_bufferCrop = NA,
thres = NA,
projectsResults = NA,
occuranceData = sp1,
v_data = NA,
g_buffer = NA,
natArea = natArea,
protectedAreas = protectedAreas,
countsData = c1,
variableImportance = NA,
NoModel = TRUE))
}
try(
rmarkdown::render(input = "R2/summarize/singleSpeciesSummary_1k.Rmd",
output_format = "html_document",
output_dir =  "data/Vitis/speciesSummaryHTML",  # file.path(allPaths$result),
output_file = paste0(j,"_Summary_fnaFilter"),
params = list(
reportData = reportData),
envir = new.env(parent = globalenv())
# clean = F,
# encoding = "utf-8"
)
)
overwrite <- TRUE
print(j)
#generate paths for exporting data
allPaths <- definePaths(dir1 = dir1,
j = j,
runVersion = runVersion)
# create directories if needed
generateFolders(allPaths)
# process data
## species specific data
sd1 <- subsetSpecies(occuranceData = speciesData, species = j)
## counts data
c1 <- write_CSV(path = allPaths$countsPaths,
overwrite = TRUE,
function1 = generateCounts(speciesData = sd1))
#srsex
srsex <- write_CSV(path = allPaths$srsExPath,
overwrite = overwrite,
function1 = srs_exsitu(sp_counts = c1))
# check for no lat lon data
if(c1$totalUseful == 0){
erroredSpecies$noLatLon <- c(erroredSpecies$noLatLon, j)
next
print("next")
}
## create the inital spatial object
sp1 <- write_GPKG(path = allPaths$spatialDataPath,
overwrite = overwrite,
function1 = createSF_Objects(speciesData = sd1) %>%
removeDuplicates()
)
# apply FNA filter if possible.
sp1 <- write_GPKG(path = allPaths$spatialDataPath,
overwrite = overwrite,
function1 = applyFNA(speciesPoints = sp1, fnaData = fnaData))
qtm(sp1)
## define natural area based on ecoregions
natArea <- write_GPKG(path = allPaths$natAreaPath,
overwrite = overwrite,
function1 = nat_area_shp(speciesPoints = sp1,
ecoregions = ecoregions))
# condition for at least 8 observations
## attempt to model the data
if(nrow(sp1) >=8){
print("Modeling")
## define number of background points
b_Number <- numberBackground(natArea = natArea)
## generate GA50 objects
g_buffer <- write_Rast(path = allPaths$ga50Path,
overwrite = overwrite,
function1 = create_buffers(speciesPoints = sp1,
natArea = natArea,
bufferDist = bufferDist,
templateRast = templateRast))
## associate observations with bioclim data and spatial thin
m_data1 <- write_CSV(path = allPaths$allDataPath,
overwrite = overwrite,
generateModelData(speciesPoints = sp1,
natArea = natArea,
bioVars = bioVars,
b_Number = b_Number))
# exporting with type column now removing for consistenty
m_data <- m_data1 |>
dplyr::select(-type)
# remove duplicated background data
presence <- m_data[m_data$presence == 1,]
absence <- m_data[m_data$presence != 1,]
dubs <- duplicated(absence[,2:27])
absence <- absence[!dubs, ]
m_data <- bind_rows(presence, absence)
## perform variable selection
v_data <- write_RDS(path = allPaths$variablbeSelectPath,
overwrite = overwrite,
function1 = varaibleSelection(modelData = m_data,
parallel = TRUE))
## prepare data for maxent model
rasterInputs <- write_Rast(path = allPaths$prepRasters,
overwrite = overwrite,
function1 = cropRasters(natArea = natArea,
bioVars = bioVars,
selectVars = v_data))
## perform maxent model
### tabular data
sdm_results <- write_RDS(path = allPaths$sdmResults,
overwrite = overwrite,
function1 = runMaxnet(selectVars = v_data,
rasterData = rasterInputs))
## condition to test if model was suscessfull produced.
if(!is.null(sdm_results)){
print("conservation metrics")
## raster objects
projectsResults <- write_RDS(path = allPaths$modeledRasters,
overwrite = overwrite,
function1 = rasterResults(sdm_result))
## generate evaluationTable
evalTable <- write_CSV(path = allPaths$evalTablePath,
overwrite = overwrite,
function1 = evaluateTable(sdm_result = sdm_results))
## generate threshold rasters
thres <- write_Rast(path =  allPaths$thresPath,
overwrite = overwrite,
function1 = generateThresholdModel(evalTable = evalTable,
rasterResults = projectsResults))
## generate a mess map
## generate a kernal density map
## crop GA50 to threshold area
g_bufferCrop <- write_Rast(path = allPaths$g50_bufferPath,
overwrite = overwrite,
function1 = cropG_Buffer(ga50 = g_buffer,
thres = thres))
# Gap Analysis Methods  ---------------------------------------------------
# insitu
## srsin
srsin <- write_CSV(path = allPaths$srsinPath,
overwrite = overwrite,
function1 = srs_insitu(occuranceData = sp1,
thres = thres,
protectedArea =protectedAreas ))
## ersin
ersin <- write_CSV(path = allPaths$ersinPath,
overwrite = overwrite,
function1 = ers_insitu(occuranceData = sp1,
nativeArea = natArea,
protectedArea = protectedAreas,
thres = thres,
rasterPath = allPaths$ersinRast))
## grsin
grsin <-  write_CSV(path = allPaths$grsinPath,
overwrite = overwrite ,
function1 = grs_insitu(occuranceData = sp1,
protectedArea = protectedAreas,
thres = thres))
## fcsin
fcsin <- write_CSV(path = allPaths$fcsinPath,
overwrite = overwrite ,
function1 = fcs_insitu(srsin = srsin,
grsin = grsin,
ersin = ersin,
noModel = FALSE
))
#exsitu
##ersex
ersex <- write_CSV(path = allPaths$ersexPath,
overwrite = TRUE,
function1 = ers_exsitu(speciesData = sd1,
thres = thres,
natArea = natArea,
ga50 = g_bufferCrop,
rasterPath = allPaths$ersexRast))
##grsex
grsex <- write_CSV(path = allPaths$grsexPath,
overwrite = overwrite,
function1 = grs_exsitu(speciesData = sd1,
ga50 = g_bufferCrop,
thres = thres))
##fcsex
fcsex <- write_CSV(path = allPaths$fcsexPath,
overwrite = TRUE,
function1 = fcs_exsitu(srsex = srsex,
grsex = grsex,
ersex = ersex,
noModel = FALSE))
#combined measure
fcsCombined <- write_CSV(path = allPaths$fcsCombinedPath,
overwrite = TRUE,
function1 = fcs_combine(fcsin = fcsin,
fcsex = fcsex))
#gather features for RMD
## just a helper function to reduce the number of input for the RMD
reportData <- write_RDS(path = allPaths$summaryDataPath,
overwrite = TRUE,
function1 = grabData(fscCombined = fcsCombined,
ersex = ersex,
fcsex = fcsex,
fcsin = fcsin,
evalTable = evalTable,
g_bufferCrop = g_bufferCrop,
thres = thres,
projectsResults = projectsResults,
occuranceData = sp1,
v_data = v_data,
g_buffer = g_buffer,
natArea = natArea,
protectedAreas = protectedAreas,
countsData = c1,
variableImportance = allPaths$variablbeSelectPath,
NoModel = FALSE))
}else{ # no sdm results
erroredSpecies$noSDM <- c(erroredSpecies$noSDM, j)
print("conservation Metrics")
#Complete conservation assessments without models
## srsin
srsin <- write_CSV(path = allPaths$srsinPath,
overwrite = overwrite,
function1 = srs_insitu(occuranceData = sp1,
thres = NA,
protectedArea =protectedAreas ))
## fcsin
fcsin <- write_CSV(path = allPaths$fcsinPath,
overwrite = overwrite,
function1 = fcs_insitu(srsin = srsin,
grsin = grsin,
ersin = ersin,
noModel = TRUE))
##fcsex
fcsex <- write_CSV(path = allPaths$fcsexPath,
overwrite = overwrite,
function1 = fcs_exsitu(srsex = srsex,
grsex = grsex,
ersex = ersex,
noModel = TRUE))
#combined measure
fcsCombined <- write_CSV(path = allPaths$fcsCombinedPath,
overwrite = overwrite,
function1 = fcs_combine(fcsin = fcsin,
fcsex = fcsex))
# generate report data for species
reportData <- write_RDS(path = allPaths$summaryDataPath,
overwrite = TRUE,
function1 = grabData(fscCombined = fcsCombined,
ersex = NA,
fcsex = fcsex,
fcsin = fcsin,
evalTable = NA,
g_bufferCrop = NA,
thres = NA,
projectsResults = NA,
occuranceData = sp1,
v_data = NA,
g_buffer = NA,
natArea = natArea,
protectedAreas = protectedAreas,
countsData = c1,
variableImportance = allPaths$variablbeSelectPath,
NoModel = TRUE))
}
}else{ # end of attempt to model
erroredSpecies$lessThenEight <- c(erroredSpecies$lessThenEight, j)
### need the FCS summary data for the full run summary
## srsin can be calculated for all species with at least one lat lon value
## if no model is present (GRSin and ERSin are NA)
## if no G points are present (srsex, grsex, and ersex are 0)
## if g Points present but no model (srsex is calculated, grsex, and ersex are NA )
# pull n G points from
gPoints <- c1$totalGUseful
#
srsin <- write_CSV(path = allPaths$srsinPath,
overwrite = overwrite,
function1 = srs_insitu(occuranceData = sp1,
thres = NA,
protectedArea =protectedAreas ))
fcsin <- write_CSV(path = allPaths$fcsinPath,
overwrite = overwrite,
function1 = fcs_insitu(srsin = srsin,
grsin = grsin,
ersin = ersin,
noModel = TRUE))
##fcsex
fcsex <- write_CSV(path = allPaths$fcsexPath,
overwrite = overwrite,
function1 = fcs_exsitu(srsex = srsex,
grsex = grsex,
ersex = ersex,
noModel = TRUE,
gPoints = gPoints))
#combined measure
fcsCombined <- write_CSV(path = allPaths$fcsCombinedPath,
overwrite = overwrite,
function1 = fcs_combine(fcsin = fcsin,
fcsex = fcsex))
reportData <- write_RDS(path = allPaths$summaryDataPath,
overwrite = TRUE,
function1 = grabData(fscCombined = fcsCombined,
ersex = NA,
fcsex = fcsex,
fcsin = fcsin,
evalTable = NA,
g_bufferCrop = NA,
thres = NA,
projectsResults = NA,
occuranceData = sp1,
v_data = NA,
g_buffer = NA,
natArea = natArea,
protectedAreas = protectedAreas,
countsData = c1,
variableImportance = NA,
NoModel = TRUE))
}
reportData$projectedResults
hist(values(reportData$projectedResults$mean))
hist(values(reportData$projectedResults$median))
summary(values(reportData$projectedResults$median))
species
# errors
# [1] "Vitis rotundifolia" # seems to stallout?
# [1] "Vitis riparia" : something going on
# [1] "Vitis vulpina" summary md
#testing
j <- "Vitis acerifolia"
overwrite
