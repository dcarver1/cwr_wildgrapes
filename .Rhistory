tidyterra::distinct(ECO_ID_U)%>%
tidyterra::drop_na()%>%
tidyterra::pull()
# total number of eco regions within the SDM with protect areas.
totalProtectedEcoregions <- terra::extract(x = nativeArea, y = protectedPoints)%>%
tidyterra::distinct(ECO_ID_U)%>%
tidyterra::drop_na()%>%
tidyterra::pull()%>%
length()
ers <- (totalProtectedEcoregions/totalEcoregions)*100
ers
# total number of eco regions within the SDM
totalEcoregions <- terra::extract(x = nativeArea, y = thresPoints) %>%
tidyterra::distinct(ECO_ID_U)%>%
tidyterra::drop_na()%>%
tidyterra::pull()%>%
length()
# total number of eco regions within the SDM with protect areas.
totalProtectedEcoregions <- terra::extract(x = nativeArea, y = protectedPoints)%>%
tidyterra::distinct(ECO_ID_U)%>%
tidyterra::drop_na()%>%
tidyterra::pull()%>%
length()
totalProtectedEcoregions
if(length(totalProtectedEcoregions)>0){
ers <- 0
}else{
ers <- (totalProtectedEcoregions/totalEcoregions)*100
}
ers
totalProtectedEcoregions
totalEcoregions
5/5
(totalProtectedEcoregions/totalEcoregions)*100
ers <- (totalProtectedEcoregions/totalEcoregions)*100
df <- data.frame(ID=occuranceData$taxon[1],
SPP_N_ECO = totalEcoregions,
SPP_WITHIN_PA_N_ECO = totalProtectedEcoregions,
ERS = ers)
df
#' Ecological Representatiativeness Score Exsitu collections
#'
#' @param speciesData
#' @param thres
#' @param natArea
#' @param ga50
#'
#' @return Data frames with ERS score details.
ers_exsitu <- function(speciesData,thres,natArea,ga50) {
if(class(ga50)[[1]] != "SpatRaster"){
ers <- 0
gEco <- NA
}else{
# convert natural area object in a vect feature
n1 <- natArea %>%
dplyr::select(ECO_ID_U)%>%
vect()
v1 <- terra::zonal(x = thres,z = n1,fun="sum",na.rm=TRUE)
v1$ECO_ID_U <- n1$ECO_ID_U
# Number of ecoregions considered.
nEco <- v1 %>%
filter(Threshold > 0)%>%
nrow()
# determine ecoregions in ga50 area
v2 <- terra::zonal(x = ga50,z = n1,fun="sum",na.rm=TRUE)
gEco <- v2 %>%
filter(layer >0)%>%
nrow()
# ERs calculation
ers <- min(c(100, (gEco/nEco)*100))
}
# generate dataframe
out_df <- data.frame(ID=speciesData$taxon[1],
SPP_N_ECO=nEco,
G_N_ECO=gEco,
ERS=ers)
return(out_df)
}
ers_insitu <- function(occuranceData,ecoregions,nativeArea, protectedArea, thres){
# total e
# mask protected areas layer
thres[thres == 0] <- NA
# crop protected areas raster
p1 <- terra::crop(x = protectedArea, y = thres)
# multiple to create mask
p1 <- p1 * thres
## point object of the protected area
protectedPoints <- terra::as.points(x = p1)
thresPoints <- terra::as.points(x = thres)
# convert native area to a vect object
nativeArea <- vect(nativeArea) %>%
tidyterra::select("ECO_ID_U")
# total number of eco regions within the SDM
totalEcoregions <- terra::extract(x = nativeArea, y = thresPoints) %>%
tidyterra::distinct(ECO_ID_U)%>%
tidyterra::drop_na()%>%
tidyterra::pull()%>%
length()
# total number of eco regions within the SDM with protect areas.
totalProtectedEcoregions <- terra::extract(x = nativeArea, y = protectedPoints)%>%
tidyterra::distinct(ECO_ID_U)%>%
tidyterra::drop_na()%>%
tidyterra::pull()%>%
length()
if(length(totalProtectedEcoregions)>0){
ers <- 0
}else{
ers <- (totalProtectedEcoregions/totalEcoregions)*100
}
df <- data.frame(ID=occuranceData$taxon[1],
SPP_N_ECO = totalEcoregions,
SPP_WITHIN_PA_N_ECO = totalProtectedEcoregions,
ERS = ers)
return(df)
}
ers_insitu <- function(occuranceData,nativeArea, protectedArea, thres){
# total e
# mask protected areas layer
thres[thres == 0] <- NA
# crop protected areas raster
p1 <- terra::crop(x = protectedArea, y = thres)
# multiple to create mask
p1 <- p1 * thres
## point object of the protected area
protectedPoints <- terra::as.points(x = p1)
thresPoints <- terra::as.points(x = thres)
# convert native area to a vect object
nativeArea <- vect(nativeArea) %>%
tidyterra::select("ECO_ID_U")
# total number of eco regions within the SDM
totalEcoregions <- terra::extract(x = nativeArea, y = thresPoints) %>%
tidyterra::distinct(ECO_ID_U)%>%
tidyterra::drop_na()%>%
tidyterra::pull()%>%
length()
# total number of eco regions within the SDM with protect areas.
totalProtectedEcoregions <- terra::extract(x = nativeArea, y = protectedPoints)%>%
tidyterra::distinct(ECO_ID_U)%>%
tidyterra::drop_na()%>%
tidyterra::pull()%>%
length()
if(length(totalProtectedEcoregions)>0){
ers <- 0
}else{
ers <- (totalProtectedEcoregions/totalEcoregions)*100
}
df <- data.frame(ID=occuranceData$taxon[1],
SPP_N_ECO = totalEcoregions,
SPP_WITHIN_PA_N_ECO = totalProtectedEcoregions,
ERS = ers)
return(df)
}
## ersin
ersin <- ers_insitu(occuranceData = sp1,
nativeArea = natArea,
protectedArea = protectedAreas,
thres = thres)
ersin
length(totalProtectedEcoregions)
totalProtectedEcoregions
ers_insitu <- function(occuranceData,nativeArea, protectedArea, thres){
# total e
# mask protected areas layer
thres[thres == 0] <- NA
# crop protected areas raster
p1 <- terra::crop(x = protectedArea, y = thres)
# multiple to create mask
p1 <- p1 * thres
## point object of the protected area
protectedPoints <- terra::as.points(x = p1)
thresPoints <- terra::as.points(x = thres)
# convert native area to a vect object
nativeArea <- vect(nativeArea) %>%
tidyterra::select("ECO_ID_U")
# total number of eco regions within the SDM
totalEcoregions <- terra::extract(x = nativeArea, y = thresPoints) %>%
tidyterra::distinct(ECO_ID_U)%>%
tidyterra::drop_na()%>%
tidyterra::pull()%>%
length()
# total number of eco regions within the SDM with protect areas.
totalProtectedEcoregions <- terra::extract(x = nativeArea, y = protectedPoints)%>%
tidyterra::distinct(ECO_ID_U)%>%
tidyterra::drop_na()%>%
tidyterra::pull()%>%
length()
if(totalProtectedEcoregions == 0){
ers <- 0
}else{
ers <- (totalProtectedEcoregions/totalEcoregions)*100
}
df <- data.frame(ID=occuranceData$taxon[1],
SPP_N_ECO = totalEcoregions,
SPP_WITHIN_PA_N_ECO = totalProtectedEcoregions,
ERS = ers)
return(df)
}
## ersin
ersin <- ers_insitu(occuranceData = sp1,
nativeArea = natArea,
protectedArea = protectedAreas,
thres = thres)
ersin
# mask protected areas layer
thres[thres == 0] <- NA
# crop protected areas raster
p1 <- terra::crop(x = protectedArea, y = thres)
# multiple to create mask
p1 <- p1 * thres
p1
plot(  # mask protected areas layer
thres[thres == 0] <- NA
# crop protected areas raster
p1 <- terra::crop(x = protectedArea, y = thres)
plot(p1)
terra::area(p1)
terra::cellSize(p1)
protectArea <- terra::cellSize(p1)
thresholdArea <- terra::cellSize(thres)
thresholdArea
plot(thresholdArea)
protectArea <- terra::cellSize(p1) * p1
protectArea
plot(protectArea)
sum(protectArea)
sum(values(protectArea))
sum(values(protectArea),na.rm)
sum(values(protectArea),na.rm=TRUE)
protectArea
?cellSize
protectArea <- terra::cellSize(p1,mask = p1)
protectArea <- terra::cellSize(p1,mask = TRUE)
plot(protectArea)
mSum <- sum(values(protectArea))
mSum
mSum <- sum(values(protectArea), na.rm = TRUE)
mSum
protectArea <- terra::cellSize(p1,mask = TRUE,unit = "km" )
kSum <- sum(values(protectArea), na.rm = TRUE)
kSum
grs <- min(c(100, protectAreaSum/thresholdAreaSum*100))
protectAreaSum <- sum(values(protectArea), na.rm = TRUE)
thresholdArea <- terra::cellSize(thres, mask = TRUE, unit = "km")
thresholdAreaSum <- sum(values(thresholdArea), na.rm = TRUE)
grs <- min(c(100, protectAreaSum/thresholdAreaSum*100))
grs
grs_insitu <- function(occuranceData, protectedArea, thres){
# mask protected areas layer
thres[thres == 0] <- NA
# crop protected areas raster
p1 <- terra::crop(x = protectedArea, y = thres)
# multiple to create mask
p1 <- p1 * thres
protectArea <- terra::cellSize(p1,mask = TRUE,unit = "km" )
protectAreaSum <- sum(values(protectArea), na.rm = TRUE)
thresholdArea <- terra::cellSize(thres, mask = TRUE, unit = "km")
thresholdAreaSum <- sum(values(thresholdArea), na.rm = TRUE)
# calcualte the total area
if(protectAreaSum == 0){
protectAreaSum <- 0
grs <- 0
}else{
grs <- min(c(100, protectAreaSum/thresholdAreaSum*100))
}
# return objects
df <- data.frame(ID = species,
SPP_AREA_km2 = thresholdAreaSum,
SPP_WITHIN_PA_AREA_km2 = protectAreaSum,
GRS = grs)
return(df)
}
#' Geographic Representativeness Score insitu
#'
#' @param occuranceData
#' @param protectedArea
#' @param thres
#'
#' @return dataframe with GRS data
grs_insitu <- function(occuranceData, protectedArea, thres){
# mask protected areas layer
thres[thres == 0] <- NA
# crop protected areas raster
p1 <- terra::crop(x = protectedArea, y = thres)
# multiple to create mask
p1 <- p1 * thres
protectArea <- terra::cellSize(p1,mask = TRUE,unit = "km" )
protectAreaSum <- sum(values(protectArea), na.rm = TRUE)
thresholdArea <- terra::cellSize(thres, mask = TRUE, unit = "km")
thresholdAreaSum <- sum(values(thresholdArea), na.rm = TRUE)
# calcualte the total area
if(protectAreaSum == 0){
protectAreaSum <- 0
grs <- 0
}else{
grs <- min(c(100, protectAreaSum/thresholdAreaSum*100))
}
# return objects
df <- data.frame(ID = species,
SPP_AREA_km2 = thresholdAreaSum,
SPP_WITHIN_PA_AREA_km2 = protectAreaSum,
GRS = grs)
return(df)
}
#' Geographic Representativeness Score insitu
#'
#' @param occuranceData
#' @param protectedArea
#' @param thres
#'
#' @return dataframe with GRS data
grs_insitu <- function(occuranceData, protectedArea, thres){
# mask protected areas layer
thres[thres == 0] <- NA
# crop protected areas raster
p1 <- terra::crop(x = protectedArea, y = thres)
# multiple to create mask
p1 <- p1 * thres
protectArea <- terra::cellSize(p1,mask = TRUE,unit = "km" )
protectAreaSum <- sum(values(protectArea), na.rm = TRUE)
thresholdArea <- terra::cellSize(thres, mask = TRUE, unit = "km")
thresholdAreaSum <- sum(values(thresholdArea), na.rm = TRUE)
# calcualte the total area
if(protectAreaSum == 0){
protectAreaSum <- 0
grs <- 0
}else{
grs <- min(c(100, protectAreaSum/thresholdAreaSum*100))
}
# return objects
df <- data.frame(ID = occuranceData$taxon[1],
SPP_AREA_km2 = thresholdAreaSum,
SPP_WITHIN_PA_AREA_km2 = protectAreaSum,
GRS = grs)
return(df)
}
## grsin
grsin <- grs_insitu(occuranceData = sp1,
protectedArea = protectedAreas,
thres = thres)
grsin
srsin
ersin
grsin
#' Final Conservation Score insitu
#'
#' @param srsin
#' @param grsin
#' @param ersin
#'
#' @return
fcs_insitu <- function(srsin, grsin, ersin) {
# calculate the mean across the three measures
sp_fcs <- mean(c(srsin$SRS,grsin$GRS,ersin$ERS), na.rm=T)
#assign classes (min)
if (sp_fcs < 25) {
score <- "UP"
} else if (sp_fcs >= 25 & sp_fcs < 50) {
score <- "HP"
} else if (sp_fcs >= 50 & sp_fcs < 75) {
score <- "MP"
} else {
score <- "LP"
}
out_df <- data.frame(ID=srsin$ID,
SRS=srsin$SRS,
GRS=grsin$GRS,
ERS=ersin$ERS,
FCS=sp_fcs,
FCS_Score = score)
return(out_df)
}
## fcsin
fcsin <- fcs_insitu(srsin = srsin,
grsin = grsin,
ersin = ersin)
fcsin
#compute FCSc_min and FCSc_max
data_comb <- data.frame(ID=fcsin$ID,
FCSex=data_ex$FCS,
FCSin=data_in$FCS)
#compute FCSc_min and FCSc_max
data_comb <- data.frame(ID=fcsin$ID,
FCSex=fcsex$FCS,
FCSin=fcsin$FCS)
data_comb
data_comb$FCSc_min <- min(c(data_comb$FCS,data_comb$FCS),na.rm=T)
data_comb
data_comb$FCSc_min <- min(c(data_comb$FCSex,data_comb$FCSin),na.rm=T)
data_comb
data_comb$FCSc_max <- max(c(data_comb$FCSex,data_comb$FCSin),na.rm=T)
data_comb$FCSc_mean <- mean(c(data_comb$FCSex,data_comb$FCSin),na.rm=T)
data_comb
#assign classes (min)
if (data_comb$FCSc_min < 25) {
data_comb$FCSc_min_class <- "UP"
} else if (data_comb$FCSc_min >= 25 & data_comb$FCSc_min < 50) {
data_comb$FCSc_min_class <- "HP"
} else if (data_comb$FCSc_min >= 50 & data_comb$FCSc_min < 75) {
data_comb$FCSc_min_class <- "MP"
} else {
data_comb$FCSc_min_class <- "LP"
}
#assign classes (max)
if (data_comb$FCSc_max < 25) {
data_comb$FCSc_max_class <- "UP"
} else if (data_comb$FCSc_max >= 25 & data_comb$FCSc_max < 50) {
data_comb$FCSc_max_class <- "HP"
} else if (data_comb$FCSc_max >= 50 & data_comb$FCSc_max < 75) {
data_comb$FCSc_max_class <- "MP"
} else {
data_comb$FCSc_max_class <- "LP"
}
#assign classes (mean)
if (data_comb$FCSc_mean < 25) {
data_comb$FCSc_mean_class <- "UP"
} else if (data_comb$FCSc_mean >= 25 & data_comb$FCSc_mean < 50) {
data_comb$FCSc_mean_class <- "HP"
} else if (data_comb$FCSc_mean >= 50 & data_comb$FCSc_mean < 75) {
data_comb$FCSc_mean_class <- "MP"
} else {
data_comb$FCSc_mean_class <- "LP"
}
comb_dir
data_comb
fcs_combine <- function(fcsin, fcsex) {
#compute FCSc_min and FCSc_max
data_comb <- data.frame(ID=fcsin$ID,
FCSex=fcsex$FCS,
FCSin=fcsin$FCS)
data_comb$FCSc_min <- min(c(data_comb$FCSex,data_comb$FCSin),na.rm=T)
data_comb$FCSc_max <- max(c(data_comb$FCSex,data_comb$FCSin),na.rm=T)
data_comb$FCSc_mean <- mean(c(data_comb$FCSex,data_comb$FCSin),na.rm=T)
#assign classes (min)
if (data_comb$FCSc_min < 25) {
data_comb$FCSc_min_class <- "UP"
} else if (data_comb$FCSc_min >= 25 & data_comb$FCSc_min < 50) {
data_comb$FCSc_min_class <- "HP"
} else if (data_comb$FCSc_min >= 50 & data_comb$FCSc_min < 75) {
data_comb$FCSc_min_class <- "MP"
} else {
data_comb$FCSc_min_class <- "LP"
}
#assign classes (max)
if (data_comb$FCSc_max < 25) {
data_comb$FCSc_max_class <- "UP"
} else if (data_comb$FCSc_max >= 25 & data_comb$FCSc_max < 50) {
data_comb$FCSc_max_class <- "HP"
} else if (data_comb$FCSc_max >= 50 & data_comb$FCSc_max < 75) {
data_comb$FCSc_max_class <- "MP"
} else {
data_comb$FCSc_max_class <- "LP"
}
#assign classes (mean)
if (data_comb$FCSc_mean < 25) {
data_comb$FCSc_mean_class <- "UP"
} else if (data_comb$FCSc_mean >= 25 & data_comb$FCSc_mean < 50) {
data_comb$FCSc_mean_class <- "HP"
} else if (data_comb$FCSc_mean >= 50 & data_comb$FCSc_mean < 75) {
data_comb$FCSc_mean_class <- "MP"
} else {
data_comb$FCSc_mean_class <- "LP"
}
return(data_comb)
}
#' Final Conservation Score Combined
#'
#' @param fcsin dataframe of fcsin values
#' @param fcsex dataframe of fcsexvalues
#'
#' @return dataframe of combined summayr values
fcs_combine <- function(fcsin, fcsex) {
#compute FCSc_min and FCSc_max
data_comb <- data.frame(ID=fcsin$ID,
FCSex=fcsex$FCS,
FCSin=fcsin$FCS)
data_comb$FCSc_min <- min(c(data_comb$FCSex,data_comb$FCSin),na.rm=T)
data_comb$FCSc_max <- max(c(data_comb$FCSex,data_comb$FCSin),na.rm=T)
data_comb$FCSc_mean <- mean(c(data_comb$FCSex,data_comb$FCSin),na.rm=T)
#assign classes (min)
if (data_comb$FCSc_min < 25) {
data_comb$FCSc_min_class <- "UP"
} else if (data_comb$FCSc_min >= 25 & data_comb$FCSc_min < 50) {
data_comb$FCSc_min_class <- "HP"
} else if (data_comb$FCSc_min >= 50 & data_comb$FCSc_min < 75) {
data_comb$FCSc_min_class <- "MP"
} else {
data_comb$FCSc_min_class <- "LP"
}
#assign classes (max)
if (data_comb$FCSc_max < 25) {
data_comb$FCSc_max_class <- "UP"
} else if (data_comb$FCSc_max >= 25 & data_comb$FCSc_max < 50) {
data_comb$FCSc_max_class <- "HP"
} else if (data_comb$FCSc_max >= 50 & data_comb$FCSc_max < 75) {
data_comb$FCSc_max_class <- "MP"
} else {
data_comb$FCSc_max_class <- "LP"
}
#assign classes (mean)
if (data_comb$FCSc_mean < 25) {
data_comb$FCSc_mean_class <- "UP"
} else if (data_comb$FCSc_mean >= 25 & data_comb$FCSc_mean < 50) {
data_comb$FCSc_mean_class <- "HP"
} else if (data_comb$FCSc_mean >= 50 & data_comb$FCSc_mean < 75) {
data_comb$FCSc_mean_class <- "MP"
} else {
data_comb$FCSc_mean_class <- "LP"
}
return(data_comb)
}
#combined measure
fcsCombined <- fcs_combine(fcsin = fcsin,fcsex = fcsex)
