}
### natural area
ga50Path <- paste0(dirs[3], "/ga50.tif")
if(!file.exists(ga50Path)){
terra::writeRaster(x = g_buffer, file = ga50Path)
}
g_buffer
sdm_results$do.projections$`5`
## select all g points from point object
p1 <- speciesPoints %>% filter(type == "G")
#clause to test for G occurrences
if(nrow(p1)== 0){
print("there are no g points for this species")
}else{
##buffering
buffer <- sf::st_buffer(x = p1, dist = bufferDist )
# set extent equal to native area
r1 <- templateRast %>%
terra::crop(natArea) %>%
terra::mask(natArea)
##rasterizing and matching cells to predictor layers
buffer_rs <- terra::rasterize(vect(buffer), r1)%>%
terra::crop(natArea)%>%
terra::mask(natArea)
return(buffer_rs)
}
speciesPoints
class(bioVars)
class(g_buffer)
### natural area
ga50Path <- paste0(dirs[3], "/ga50.tif")
if(!file.exists(ga50Path) & class(g_buffer) == "SpatRaster" ){
terra::writeRaster(x = g_buffer, file = ga50Path)
}
#testing
i <- genera[1]
j <- species[1]
for(i in genera){
#create folder
dir1 <- paste0("data/",genera)
if(!dir.exists(dir1)){dir.create(dir1)}
# loop over species  ------------------------------------------------------
for(j in species){
dir2 <- paste0(dir1,"/",j)
if(!dir.exists(dir2)){dir.create(dir2)}
dirs <- paste0(
dir2,"/", runVersion ,"/", c("gap_analysis", "occurances", "results")
)
for(k in dirs){
if(!dir.exists(k))
{dir.create(k,recursive = T)}
}
# process data
## species specific data
sd1 <- subsetSpecies(occuranceData =speciesData, species = j )
## counts data
c1 <- generateCounts(speciesData = sd1)
## spatial object
sp1 <- createSF_Objects(speciesData = sd1) %>%
removeDuplicates()
#srsex
srsex <- srs_exsitu(sp_counts = c1)
## define natural area based on ecoregions
natArea <-nat_area_shp(speciesPoints = sp1, ecoregions = ecoregions)
## define number of background points
b_Number <- numberBackground(natArea = natArea)
## generate GA50 objects
g_buffer <- create_buffers(
speciesPoints = sp1,
natArea = natArea,
bufferDist = bufferDist,
templateRast = templateRast
)
## associate observations with bioclim data
m_data <- generateModelData(speciesPoints = sp1,
natArea = natArea,
bioVars = bioVars,
b_Number = b_Number)
## perform variable selection
v_data <- varaibleSelection(modelData = m_data)
## prepare data for maxent model
rasterInputs <- cropRasters(
natArea = natArea,
bioVars = bioVars,
selectVars = v_data
)
## perform maxent model
sdm_results <- runMaxnet(selectVars = v_data, rasterData = rasterInputs)
## export raster images
writeProjections(sdm_result = sdm_results,
directory = dirs[3])
## evaluate outputs of the modeling process
## generate a mess map
## generate a kernal density map
# Writing out data  -------------------------------------------------------
## rather then write out inside of functions I'll try to run everything at the end
### raw species data
### counts data
countsPath <- paste0(dirs[2], "/counts.csv")
if(!file.exists(countsPath)){
write_csv(x = c1, file = countsPath)
}
### sp object
spPath <- paste0(dirs[2], "/spatialData.csv")
if(!file.exists(spPath)){
write_csv(x = sp1, file = spPath)
}
### srsex
srsExPath <- paste0(dirs[1], "/srs_ex.csv")
if(!file.exists(srsExPath)){
write_csv(x = srsex, file = srsExPath)
}
### natural area
natAreaPath <- paste0(dirs[3], "/naturalArea.gpkg")
if(!file.exists(natAreaPath)){
sf::write_sf(obj = natArea, dsn = natAreaPath)
}
### natural area
ga50Path <- paste0(dirs[3], "/ga50.tif")
if(!file.exists(ga50Path) & class(g_buffer) == "SpatRaster" ){
terra::writeRaster(x = g_buffer, file = ga50Path)
}
}# end of species loop
}
###
# hitting some odd errors with the targets workflow, going to start a none target implimentation to get everything running as expected and move from there.
# carverd@colostate.edu
#
###
# local testing
pacman::p_load("terra", "dplyr", "sf", "purrr","tmap","randomForest","VSURF",
"modelr","maxnet","pROC","DT", "readr", "vroom", "readr", "dismo")
#source functions
lapply(
# need to ensure functions are grabbed first
list.files(
path = "R2",
pattern = ".R",
full.names = TRUE,
recursive = TRUE
),
source
)
# source global objects
## maximun number of points used in model (use in subSampleCountry.R)
numPoint <- 2000
## used to define buffer distance in g buffer process in degrees
# 50k(1 degree/111km) = 0.45
bufferDist <- 0.45
# set random seed. Important for reproducability
set.seed(1234)
# set run version
runVersion <- "test1"
## overwrite Parameter
### used to determine if you want to write over existing content.
overwrite <- FALSE
# input datasets ----------------------------------------------------------
## species observations
speciesData <- read_csv("data/raw_occurances/daucusData_BioClimatic_2.5arc_modified.csv")
## bioclim layers
bioNames <- read_csv("data/geospatial_datasets/bioclim_layers/variableNames.csv")
bioVars <- readRDS("data/geospatial_datasets/bioclim_layers/bioclim_2.5arcsec_terra.RDS")
names(bioVars) <- bioNames$shortName
templateRast <- bioVars[[1]]
## countries
country <- sf::st_read("data/geospatial_datasets/counties/ne_10m_admin_2_counties.gpkg")
## counties
counties <- sf::st_read("data/geospatial_datasets/countries/ne_10m_admin_0_countries.gpkg")
## ecoregions
ecoregions <- sf::st_read("data/geospatial_datasets/ecoregions/tnc_terr_ecoregions.gpkg")
## north America
northAmerica <- sf::st_read("data/geospatial_datasets/northAmerica/northAmericaArea.gpkg")
## protect lands
### come back to this one requires some more processing
## states
states <- sf::st_read("data/geospatial_datasets/states/ne_10m_admin_1_states_provinces.gpkg")
# set up environment  -----------------------------------------------------
# primary loop ------------------------------------------------------------
genera <- unique(speciesData$genus)
species <- sort(unique(speciesData$taxon))
# species subset
species <- species[5:length(species)]
#testing
i <- genera[1]
j <- species[3]
for(i in genera){
print(i)
#create folder
dir1 <- paste0("data/",genera)
if(!dir.exists(dir1)){dir.create(dir1)}
# loop over species  ------------------------------------------------------
for(j in species){
print(j)
dir2 <- paste0(dir1,"/",j)
if(!dir.exists(dir2)){dir.create(dir2)}
dirs <- paste0(
dir2,"/", runVersion ,"/", c("gap_analysis", "occurances", "results")
)
for(k in dirs){
if(!dir.exists(k))
{dir.create(k,recursive = T)}
}
# process data
## species specific data
sd1 <- subsetSpecies(occuranceData =speciesData, species = j )
## counts data
c1 <- generateCounts(speciesData = sd1)
## spatial object
sp1 <- createSF_Objects(speciesData = sd1) %>%
removeDuplicates()
#srsex
srsex <- srs_exsitu(sp_counts = c1)
## define natural area based on ecoregions
natArea <-nat_area_shp(speciesPoints = sp1, ecoregions = ecoregions)
## at some point we're going to need to filter this out. I don't know if this
## is the right time or not.
if(nrow(sp1) >=5 ){
## define number of background points
b_Number <- numberBackground(natArea = natArea)
## generate GA50 objects
g_buffer <- create_buffers(
speciesPoints = sp1,
natArea = natArea,
bufferDist = bufferDist,
templateRast = templateRast
)
## associate observations with bioclim data
m_data <- generateModelData(speciesPoints = sp1,
natArea = natArea,
bioVars = bioVars,
b_Number = b_Number)
## perform variable selection
v_data <- varaibleSelection(modelData = m_data)
## prepare data for maxent model
rasterInputs <- cropRasters(
natArea = natArea,
bioVars = bioVars,
selectVars = v_data
)
## perform maxent model
sdm_results <- runMaxnet(selectVars = v_data,
rasterData = rasterInputs)
## generatre summary raster images
projectsResults <- rasterResults(sdm_result)
## generate evaluationTable
evalTable <- evaluateTable(sdm_result = sdm_results)
## generate threshold rasters
thres <- generateThresholdModel(evalTable = evalTable,
rasterResults = projectsResults)
## generate a mess map
## generate a kernal density map
# Gap Analysis Methods  ---------------------------------------------------
# insitu
## srsin
## ersin
## grsin
## fcsin
#exsitu
##ersex
##grsex
##fcsex
# Export the data ---------------------------------------------------------
writeData(overwrite = overwrite,
dirs = dirs,
c1 = c1,
sp1 = sp1,
srsex = srsex,
natArea = natArea,
g_buffer = g_buffer,
rasterResults = projectsResults,
evalTable = evalTable,
thres = thres)
# remove all reused variables ---------------------------------------------
rm(c1,sp1,srsex,natArea,g_buffer, projectsResults,evalTable,thres)
}
}# end of species loop
}
j
species <- sort(unique(speciesData$taxon))
species
# species subset
species <- species[13:length(species)]
for(i in genera){
print(i)
#create folder
dir1 <- paste0("data/",genera)
if(!dir.exists(dir1)){dir.create(dir1)}
# loop over species  ------------------------------------------------------
for(j in species){
print(j)
dir2 <- paste0(dir1,"/",j)
if(!dir.exists(dir2)){dir.create(dir2)}
dirs <- paste0(
dir2,"/", runVersion ,"/", c("gap_analysis", "occurances", "results")
)
for(k in dirs){
if(!dir.exists(k))
{dir.create(k,recursive = T)}
}
# process data
## species specific data
sd1 <- subsetSpecies(occuranceData =speciesData, species = j )
## counts data
c1 <- generateCounts(speciesData = sd1)
## spatial object
sp1 <- createSF_Objects(speciesData = sd1) %>%
removeDuplicates()
#srsex
srsex <- srs_exsitu(sp_counts = c1)
## define natural area based on ecoregions
natArea <-nat_area_shp(speciesPoints = sp1, ecoregions = ecoregions)
## at some point we're going to need to filter this out. I don't know if this
## is the right time or not.
if(nrow(sp1) >=5 ){
## define number of background points
b_Number <- numberBackground(natArea = natArea)
## generate GA50 objects
g_buffer <- create_buffers(
speciesPoints = sp1,
natArea = natArea,
bufferDist = bufferDist,
templateRast = templateRast
)
## associate observations with bioclim data
m_data <- generateModelData(speciesPoints = sp1,
natArea = natArea,
bioVars = bioVars,
b_Number = b_Number)
## perform variable selection
v_data <- varaibleSelection(modelData = m_data)
## prepare data for maxent model
rasterInputs <- cropRasters(
natArea = natArea,
bioVars = bioVars,
selectVars = v_data
)
## perform maxent model
sdm_results <- runMaxnet(selectVars = v_data,
rasterData = rasterInputs)
## generatre summary raster images
projectsResults <- rasterResults(sdm_result)
## generate evaluationTable
evalTable <- evaluateTable(sdm_result = sdm_results)
## generate threshold rasters
thres <- generateThresholdModel(evalTable = evalTable,
rasterResults = projectsResults)
## generate a mess map
## generate a kernal density map
# Gap Analysis Methods  ---------------------------------------------------
# insitu
## srsin
## ersin
## grsin
## fcsin
#exsitu
##ersex
##grsex
##fcsex
# Export the data ---------------------------------------------------------
writeData(overwrite = overwrite,
dirs = dirs,
c1 = c1,
sp1 = sp1,
srsex = srsex,
natArea = natArea,
g_buffer = g_buffer,
rasterResults = projectsResults,
evalTable = evalTable,
thres = thres)
# remove all reused variables ---------------------------------------------
rm(c1,sp1,srsex,natArea,g_buffer, projectsResults,evalTable,thres)
}
}# end of species loop
}
j
species <- sort(unique(speciesData$taxon))
species
# species subset
species <- species[21:length(species)]
for(i in genera){
print(i)
#create folder
dir1 <- paste0("data/",genera)
if(!dir.exists(dir1)){dir.create(dir1)}
# loop over species  ------------------------------------------------------
for(j in species){
print(j)
dir2 <- paste0(dir1,"/",j)
if(!dir.exists(dir2)){dir.create(dir2)}
dirs <- paste0(
dir2,"/", runVersion ,"/", c("gap_analysis", "occurances", "results")
)
for(k in dirs){
if(!dir.exists(k))
{dir.create(k,recursive = T)}
}
# process data
## species specific data
sd1 <- subsetSpecies(occuranceData =speciesData, species = j )
## counts data
c1 <- generateCounts(speciesData = sd1)
## spatial object
sp1 <- createSF_Objects(speciesData = sd1) %>%
removeDuplicates()
#srsex
srsex <- srs_exsitu(sp_counts = c1)
## define natural area based on ecoregions
natArea <-nat_area_shp(speciesPoints = sp1, ecoregions = ecoregions)
## at some point we're going to need to filter this out. I don't know if this
## is the right time or not.
if(nrow(sp1) >=5 ){
## define number of background points
b_Number <- numberBackground(natArea = natArea)
## generate GA50 objects
g_buffer <- create_buffers(
speciesPoints = sp1,
natArea = natArea,
bufferDist = bufferDist,
templateRast = templateRast
)
## associate observations with bioclim data
m_data <- generateModelData(speciesPoints = sp1,
natArea = natArea,
bioVars = bioVars,
b_Number = b_Number)
## perform variable selection
v_data <- varaibleSelection(modelData = m_data)
## prepare data for maxent model
rasterInputs <- cropRasters(
natArea = natArea,
bioVars = bioVars,
selectVars = v_data
)
## perform maxent model
sdm_results <- runMaxnet(selectVars = v_data,
rasterData = rasterInputs)
## generatre summary raster images
projectsResults <- rasterResults(sdm_result)
## generate evaluationTable
evalTable <- evaluateTable(sdm_result = sdm_results)
## generate threshold rasters
thres <- generateThresholdModel(evalTable = evalTable,
rasterResults = projectsResults)
## generate a mess map
## generate a kernal density map
# Gap Analysis Methods  ---------------------------------------------------
# insitu
## srsin
## ersin
## grsin
## fcsin
#exsitu
##ersex
##grsex
##fcsex
# Export the data ---------------------------------------------------------
writeData(overwrite = overwrite,
dirs = dirs,
c1 = c1,
sp1 = sp1,
srsex = srsex,
natArea = natArea,
g_buffer = g_buffer,
rasterResults = projectsResults,
evalTable = evalTable,
thres = thres)
# remove all reused variables ---------------------------------------------
rm(c1,sp1,srsex,natArea,g_buffer, projectsResults,evalTable,thres)
}
}# end of species loop
}
j
species
###
# Code for processing the input datasets to match the model data requirements
# carverd@colostate.edu
# 20230608
###
pacman::p_load("vroom", "tidyr", "dplyr", "countrycode")
lapply(X = list.files("preprocessing/functions", pattern = ".R", full.names = TRUE),
FUN = source)
d1 <- read_csv("data/source_data/grin.csv")
d1 <- read.csv("data/source_data/grin.csv")
VieW(d1)
View(d1)
names(d1)
files <- list.files(path = "data/source_data/usda_plants",
pattern = ".csv",
full.names = TRUE)
plantsData <- files[1]
plantsData
d1 <- read.csv(plantsData)
plantsData
d1 <- read_csv(plantsData)
d1 <- readr::read_csv(plantsData)
View(d1)
files
plantsData <- files[10]
plantsData
d1 <- readr::read_csv(plantsData)
d1
plantsData <- files[10]
d1 <- readr::read_csv(plantsData)
d1
pacman::p_load("readr", "dplyr", "leaflet", "sf","tmap","stringr","htmltools")
tmap::tmap_mode("view")
# read in states data
states <- st_read("E:/genericSpatialData/US/states/tl_2017_us_state.shp")%>%
st_transform(crs = 4326)
#read in county data
counties <- st_read("E:/genericSpatialData/US/counties/tl_2017_us_county.shp")%>%
st_transform(crs=4326)
