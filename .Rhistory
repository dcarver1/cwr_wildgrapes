values_from = WDPAID
)
p1 <- as.data.frame(cbind(points, vals))
p2 <- p1[,c(1,34:ncol(p1))]
return(p2)
}
# parse points into groups of 1000
chunk_size <- 1000
n <- nrow(sp1)
grouping_factor <- (1:n - 1) %/% chunk_size + 1
sp_list <- split(sp1, grouping_factor)
v1 <- extractProArea(points = sp_list[[1]], pro1 = pro1)
v1
v1 <- extractProArea(points = sp_list[[2]], pro1 = pro1)
v1
# apply function to list
plan(multisession, workers = 4)
tic()
vals <- future_map(.x = sp_list[1:2], .f = extractProArea, pro1 = pro1)
# apply function to list
plan(multicore, workers = 4)
tic()
vals <- future_map(.x = sp_list[1:2], .f = extractProArea, pro1 = pro1)
toc()
vals
# apply function to list
plan(multicore, workers = 4)
# 2 - 27 sc
# 4 -
tic()
vals <- future_map(.x = sp_list[1:4], .f = extractProArea, pro1 = pro1)
toc()
27/2
47/4
# apply function to list
plan(multicore, workers = 8)
# 2 - 27 sc
# 4 - 47.798
tic()
vals <- future_map(.x = sp_list[1:8], .f = extractProArea, pro1 = pro1)
# loop over all species and read in spatial points object
pathRead <- function(species, runVersion){
path <- paste0("data/Vitis/",species,"/",runVersion,"/occurances/spatialData.gpkg")
if(file.exists(path)){
s1 <- st_read(path)
return(s1)
}
}
# generate single spatial data object
sp <- purrr::map(.x = species, .f = pathRead, runVersion = runVersion) |>
bind_rows()
# generate single spatial data object
sp <- purrr::map(.x = species, .f = pathRead, runVersion = runVersion)
# grab all the spatial files of interest
files <- list.files(path = "data/geospatial_datasets/protectedLands/WDPA_Mar2023_Public_shp",
pattern = ".gpkg",
full.names = TRUE,
recursive = TRUE)
# generate spatial data objects for each species
sp <- purrr::map(.x = species, .f = pathRead, runVersion = runVersion)
length(sp)
qtm(sp1[[1]])
terra::plot(sp[[1]])
# grab all the spatial files of interest
files <- list.files(path = "data/geospatial_datasets/protectedLands/WDPA_Mar2023_Public_shp",
pattern = ".gpkg",
full.names = TRUE,
recursive = TRUE)
# process individual shapefiles  into a single feature
for(i in seq_along(files)){
print(i)
# read in data and filter
s1 <- st_read(files[i])|>
dplyr::filter(MARINE %in% c("0","1")) |>
dplyr::filter(ISO3 %in% unique(sp$iso3)) |>
terra::vect()
if(i == 1){
pro <- s1
}else{
pro <- c(pro,s1)
}
}
pro1
names(pro)
names(s1)
head(s1)
s1
dim(pro1)
i
# read in data and filter
s1 <- st_read(files[i])|>
dplyr::filter(MARINE %in% c("0","1")) |>
dplyr::filter(ISO3 %in% unique(sp$iso3)) |>
terra::vect()
s1
i <- 2
# read in data and filter
s1 <- st_read(files[i])|>
dplyr::filter(MARINE %in% c("0","1")) |>
dplyr::filter(ISO3 %in% unique(sp$iso3)) |>
terra::vect()
s1
# read in data and filter
s1 <- st_read(files[i])|>
dplyr::filter(MARINE %in% c("0","1")) |>
dplyr::filter(ISO3 %in% unique(sp$iso3))
# read in data and filter
s1 <- st_read(files[i])|>
dplyr::filter(MARINE %in% c("0","1"))|>
terra::vect()
sp[[1]]
names(sp[[1]])
iso <- bind_rows(sp) |>
dplyr::select(iso3)|>
dplyr::pull()
iso
iso <- bind_rows(sp) |>
as.data.frame()
iso
iso <- bind_rows(sp) |>
as.data.frame()|>
dplyr::select(iso3)|>
dplyr::distinct()
iso
iso <- bind_rows(sp) |>
as.data.frame()|>
dplyr::select(iso3)|>
dplyr::distinct() |>
pull()
iso
# read in data and filter
s1 <- st_read(files[i])|>
dplyr::filter(MARINE %in% c("0","1"))|>
dplyr::filter(ISO3 %in% iso3) |>
terra::vect()
# read in data and filter
s1 <- st_read(files[i])|>
dplyr::filter(MARINE %in% c("0","1"))|>
dplyr::filter(ISO3 %in% iso) |>
terra::vect()
s1
View(as.data.frame(s1))
# process individual shapefiles  into a single feature
for(i in seq_along(files)){
print(i)
# read in data and filter
s1 <- st_read(files[i])|>
dplyr::filter(MARINE %in% c("0","1"))|>
dplyr::filter(ISO3 %in% iso) |>
terra::vect()
if(i == 1){
pro <- s1
}else{
pro <- c(pro,s1)
}
}
dim(pro)
pro
pro1 <- vect(pro)[,c("WDPAID", "NAME","ORIG_NAME", "DESIG_ENG", "DESIG_TYPE","ISO3")]
dim(pro1)
pro1
rm(s1, pro)
s1 <- sp[[1]]
s1
s1 <- sp[[10]]
s1
# crop pro area to species extent
p2 <- terra::crop(pro1, s1)
p2
sites <- unique(p2$WDPAID)
intersectTest <- function(site, p2, s1){
# select area of interest
area <- p2[p2$WDPAID == site, ]
# intersect
vals <- relate(area, s1, "contains") |> which()
return(data.frame(name = site, count = length(vals)))
}
intersect <- intersectTest(site = sites[1], p2 = p2, s1 = s1)
?relate
site = sites[1]
# select area of interest
area <- p2[p2$WDPAID == site, ]
area
# intersect
vals <- relate(area, s1, "contains") |> which()
s1
s1
# intersect
vals <- terra::relate(area, s1, "contains") |> which()
# intersect
vals <- terra:crop(s1, p2) |>
terra::mask(p2)
# intersect
vals <- terra:crop(s1, p2) |>
terra::mask(p2)
terra::mask()p2
# intersect
vals <- terra:crop(s1, area) |>
terra::mask(area)
library(terra)
# intersect
vals <- terra:crop(s1, area) |>
terra::mask(area)
s1
# intersect
vals <- terra:crop(s1, area)
# intersect
vals <- terra::crop(s1, area)
class(s1)
s1 <- sp[[10]]
s1
s2 <- terra::vect(s1)
s2
# intersect
tic()
vals <- terra::crop(s1, area)
toc()
# intersect
tic()
vals <- terra::crop(s1, area) |>
terra::mask(area)
toc()
vals <- terra::crop(s1, area)
vals <- terra::crop(s2, area)
vals
# intersect
tic()
vals <- terra::crop(s2, area)
toc()
# intersect
tic()
vals <- terra::crop(s2, area)
toc()
tic()
vals <- terra::crop(s2, area)
if(nrow(vals) > 0){
vals <- terra::mask(vals, area)
}
toc()
vals
vals <- terra::crop(s2, area)
length(vals)
intersectTest <- function(site, p2, s1){
s2 <- terra::vect(s1)
# select area of interest
area <- p2[p2$WDPAID == site, ]
# intersect
vals <- terra::crop(s2, area)
if(nrow(vals) > 0){
vals <- terra::mask(vals, area)
}
return(data.frame(name = site, count = length(vals)))
}
intersect <- intersectTest(site = sites[1], p2 = p2, s1 = s1)
intersect
intersect <- intersectTest(site = sites[1:10], p2 = p2, s1 = s1)
interset
intersect <- purrr::map(.x = sites, p2 = p2, s1 = s1)
intersect <- purrr::map(.x = sites,.f = intersectTest,  p2 = p2, s1 = s1)
intersect
i1 <- bind_rows(intersect) |>
dplyr::filter(count > 0) |>
dplyr::mutate(taxon = taxon)
intersect
i1 <- bind_rows(intersect) |>
dplyr::filter(count > 0)
i1
i1 <- bind_rows(intersect) |>
dplyr::filter(count > 0) |>
dplyr::mutate(taxon = s1$taxon[1])
i1
areaPerSpecies <- function(s1, pro1){
# crop pro area to species extent
p2 <- terra::crop(pro1, s1)
if(nrow(p2) > 0){
sites <- unique(p2$WDPAID)
intersect <- purrr::map(.x = sites,.f = intersectTest,  p2 = p2, s1 = s1)
i1 <- bind_rows(intersect) |>
dplyr::filter(count > 0) |>
dplyr::mutate(taxon = s1$taxon[1])
}
}
plan(strategy = multicore, worker = 4)
plan(strategy = multicore, workers = 4)
spec <- future_map(.x = sp[1:4], .f = areaPerSpecies, pro1 = pro1)
spec <- purrr::map(.x = sp[1:4], .f = areaPerSpecies, pro1 = pro1)
sp[1:4]
spec <- purrr::map(.x = sp[[1]], .f = areaPerSpecies, pro1 = pro1)
spec <- purrr::map(.x = sp[[2]], .f = areaPerSpecies, pro1 = pro1)
sp[[2]]
s1 <- sp[[20]]
s1
# crop pro area to species extent
p2 <- terra::crop(pro1, s1)
p2
sites <- unique(p2$WDPAID)
intersect <- purrr::map(.x = sites,.f = intersectTest,  p2 = p2, s1 = s1)
i1 <- bind_rows(intersect) |>
dplyr::filter(count > 0) |>
dplyr::mutate(taxon = s1$taxon[1])
i1
spec <- purrr::map(.x = sp[[2]], .f = areaPerSpecies, pro1 = pro1)
sp
sp[[1]]
sp[[2]]
sp[[3]]
sp[[4]]
sp[[3]]
spec <- purrr::map(.x = sp[[4]], .f = areaPerSpecies, pro1 = pro1)
spec <- purrr::map(.x = sp[1:2], .f = areaPerSpecies, pro1 = pro1)
results <- list()
clasS(sp)
class(sp)
sp2 <- bind_rows(sp)
specs <-unique(sp2$taxon)
specs
class(sp2)
areaPerSpecies <- function(species, s1, pro1){
# filter to species species
sp1 <- s1 |>
dplyr::filter(taxon == species)|>
terra::vect()
# crop pro area to species extent
p2 <- terra::crop(pro1, sp1)
if(nrow(p2) > 0){
sites <- unique(p2$WDPAID)
intersect <- purrr::map(.x = sites,.f = intersectTest,  p2 = p2, s1 = sp1)
i1 <- bind_rows(intersect) |>
dplyr::filter(count > 0) |>
dplyr::mutate(taxon = sp1$taxon[1])
return(i1)
}
}
t1 <- areaPerSpecies(species = specs[10], s1 = sp2, pro1 = pro1)
protectedAreaPoints <- function(species, runVersion, pathToProGPKG, countries, exportPath){
# loop over all species and read in spatial points object
pathRead <- function(species, runVersion){
path <- paste0("data/Vitis/",species,"/",runVersion,"/occurances/spatialData.gpkg")
if(file.exists(path)){
s1 <- st_read(path)
return(s1)
}
}
# generate spatial data objects for each species
sp <- purrr::map(.x = species, .f = pathRead, runVersion = runVersion)
iso <- bind_rows(sp) |>
as.data.frame()|>
dplyr::select(iso3)|>
dplyr::distinct() |>
pull()
# generate a single protected areas vector
# grab all the spatial files of interest
files <- list.files(path = "data/geospatial_datasets/protectedLands/WDPA_Mar2023_Public_shp",
pattern = ".gpkg",
full.names = TRUE,
recursive = TRUE)
# process individual shapefiles  into a single feature
for(i in seq_along(files)){
print(i)
# read in data and filter
s1 <- st_read(files[i])|>
dplyr::filter(MARINE %in% c("0","1"))|>
dplyr::filter(ISO3 %in% iso) |>
terra::vect()
if(i == 1){
pro <- s1
}else{
pro <- c(pro,s1)
}
}
pro1 <- vect(pro)[,c("WDPAID", "NAME","ORIG_NAME", "DESIG_ENG", "DESIG_TYPE","ISO3")]
rm(s1, pro)
s1 <-sp[[10]]
intersectTest <- function(site, p2, s1){
s2 <- terra::vect(s1)
# select area of interest
area <- p2[p2$WDPAID == site, ]
# intersect
vals <- terra::crop(s2, area)
if(nrow(vals) > 0){
vals <- terra::mask(vals, area)
}
return(data.frame(name = site, count = length(vals)))
}
areaPerSpecies <- function(species, s1, pro1){
# filter to species species
sp1 <- s1 |>
dplyr::filter(taxon == species)|>
terra::vect()
# crop pro area to species extent
p2 <- terra::crop(pro1, sp1)
if(nrow(p2) > 0){
sites <- unique(p2$WDPAID)
intersect <- purrr::map(.x = sites,.f = intersectTest,  p2 = p2, s1 = sp1)
i1 <- bind_rows(intersect) |>
dplyr::filter(count > 0) |>
dplyr::mutate(taxon = sp1$taxon[1])
return(i1)
}
}
}
t1 <- areaPerSpecies(species = specs[10], s1 = sp2, pro1 = pro1)
species = specs[10]
# filter to species species
sp1 <- s1 |>
dplyr::filter(taxon == species)|>
terra::vect()
sp1
species
# filter to species species
sp1 <- s1 |>
dplyr::filter(taxon == species)
sp1
s1 = sp2
# filter to species species
sp1 <- s1 |>
dplyr::filter(taxon == species)
sp1
s1
View(s1)
species
# filter to species species
sp1 <- s1[s1$taxon == species, ]
sp1
# filter to species species
sp1 <- terra::vect(s1[s1$taxon == species, ])
areaPerSpecies <- function(species, s1, pro1){
# filter to species species
sp1 <- terra::vect(s1[s1$taxon == species, ])
# crop pro area to species extent
p2 <- terra::crop(pro1, sp1)
if(nrow(p2) > 0){
sites <- unique(p2$WDPAID)
intersect <- purrr::map(.x = sites,.f = intersectTest,  p2 = p2, s1 = sp1)
i1 <- bind_rows(intersect) |>
dplyr::filter(count > 0) |>
dplyr::mutate(taxon = sp1$taxon[1])
return(i1)
}
}
t1 <- areaPerSpecies(species = specs[10], s1 = sp2, pro1 = pro1)
sp2
class(sp2)
s1 = sp2
s1  <- sp2
s1
class(s1)
# filter to species species
sp1 <- terra::vect(s1[s1$taxon == species, ])
sp1
# crop pro area to species extent
p2 <- terra::crop(pro1, sp1)
p2
if(nrow(p2) > 0){
sites <- unique(p2$WDPAID)
intersect <- purrr::map(.x = sites,.f = intersectTest,  p2 = p2, s1 = sp1)
i1 <- bind_rows(intersect) |>
dplyr::filter(count > 0) |>
dplyr::mutate(taxon = sp1$taxon[1])
return(i1)
}
intersectTest <- function(site, p2, s1){
# select area of interest
area <- p2[p2$WDPAID == site, ]
# intersect
vals <- terra::crop(s1, area)
if(nrow(vals) > 0){
vals <- terra::mask(vals, area)
}
return(data.frame(name = site, count = length(vals)))
}
# filter to species species
sp1 <- terra::vect(s1[s1$taxon == species, ])
# crop pro area to species extent
p2 <- terra::crop(pro1, sp1)
if(nrow(p2) > 0){
sites <- unique(p2$WDPAID)
intersect <- purrr::map(.x = sites,.f = intersectTest,  p2 = p2, s1 = sp1)
i1 <- bind_rows(intersect) |>
dplyr::filter(count > 0) |>
dplyr::mutate(taxon = sp1$taxon[1])
return(i1)
}
i1
areaPerSpecies <- function(species, s1, pro1){
# filter to species species
sp1 <- terra::vect(s1[s1$taxon == species, ])
# crop pro area to species extent
p2 <- terra::crop(pro1, sp1)
if(nrow(p2) > 0){
sites <- unique(p2$WDPAID)
intersect <- purrr::map(.x = sites,.f = intersectTest,  p2 = p2, s1 = sp1)
i1 <- bind_rows(intersect) |>
dplyr::filter(count > 0) |>
dplyr::mutate(taxon = sp1$taxon[1])
return(i1)
}
}
t1 <- areaPerSpecies(species = specs[10], s1 = sp2, pro1 = pro1)
t1
t1 <- areaPerSpecies(species = specs[11], s1 = sp2, pro1 = pro1)
t1
inPro <- purrr::map(.x = specs, .f = areaPerSpecies,s1 = sp2, pro1 = pro1)
inPro <- purrr::map(.x = specs[1:5], .f = areaPerSpecies,s1 = sp2, pro1 = pro1)
inPro
inPro <- purrr::map(.x = specs[1:5], .f = areaPerSpecies,s1 = sp2, pro1 = pro1) |>
bind_rows()
inPro
inPro <- purrr::map(.x = specs[1:12], .f = areaPerSpecies,s1 = sp2, pro1 = pro1) |>
bind_rows()
inPro
gc()
