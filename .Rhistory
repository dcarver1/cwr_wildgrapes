"factoextra")
tmap::tmap_mode("view")
#source functions
source("R2/helperFunctions.R")
## using the helper function to help with edits. Save changes then run sourceFiles to console
sourceFiles(gapAnalysisOnly = FALSE)
# primary loop ------------------------------------------------------------
genera <- unique(speciesData$genus)
# species <- rerunTaxon
species <- sort(unique(speciesData$taxon))
# #testing
i <- genera[1]
j <- species[23]
erroredSpecies <- list(noLatLon = c(),
lessThenEight = c(),
noSDM = c(),
noHTML = c())
plan(strategy = "multisession", workers =4)
print(i)
#create folder
dir1 <- paste0("data/",i)
i <- genera[1]
genera
# primary loop ------------------------------------------------------------
genera <- unique(speciesData$genus)
# species <- rerunTaxon
species <- sort(unique(speciesData$taxon))
###
# hitting some odd errors with the targets workflow, going to start a none target
# implimentation to get everything running as expected and move from there.
# carverd@colostate.edu
# 20230621
###
# local testing
pacman::p_load("dplyr", "sf","terra",  "purrr","randomForest","VSURF",
"modelr","maxnet","pROC","DT", "readr", "vroom", "readr", "dismo",
"leaflet", "tidyterra", "rmarkdown", "furrr", "stringr", "spThin",
"tictoc","tigris", "tmap", "googlesheets4", "ggplot2", "plotly",
"factoextra")
tmap::tmap_mode("view")
#source functions
source("R2/helperFunctions.R")
## using the helper function to help with edits. Save changes then run sourceFiles to console
sourceFiles(gapAnalysisOnly = FALSE)
# local testing
pacman::p_load("dplyr", "sf","terra",  "purrr","randomForest","VSURF",
"modelr","maxnet","pROC","DT", "readr", "vroom", "readr", "dismo",
"leaflet", "tidyterra", "rmarkdown", "furrr", "stringr", "spThin",
"tictoc","tigris", "tmap", "googlesheets4", "ggplot2", "plotly",
"factoextra")
tmap::tmap_mode("view")
#source functions
source("R2/helperFunctions.R")
## using the helper function to help with edits. Save changes then run sourceFiles to console
sourceFiles(gapAnalysisOnly = FALSE)
# read in the data from the spreadsheet
alteredData <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1_BfJawocOnA-1m9_gl5qZvufXHBCCOacMZX69cQz2LY/edit?gid=139317771#gid=139317771")
# Vitis
# filtering the extra values coming from the data prep process
speciesData <- read_csv("data/processed_occurrence/model_data072025.csv") |>
dplyr::select(-c("geometry","index", "validLat","validLon","validLatLon"))
# # using the data from the county maps for an reference run
# speciesData1 <- read_csv("data/processed_occurrence/DataForCountyMaps_20230320.csv")|>
#   dplyr::filter(!is.na(taxon),
#                 taxon %in% speciesData$taxon,
#                 genus == "Vitis")|>
#   dplyr::select(-c(geometry))
# speciesData <- speciesData1
# fnaData
fnaData <- read_csv("data/source_data/FNA_stateClassification.csv")
# read in the data from the spreadsheet
alteredData <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1_BfJawocOnA-1m9_gl5qZvufXHBCCOacMZX69cQz2LY/edit?gid=139317771#gid=139317771")
a2 <- alteredData |>
dplyr::filter(nchar(alteredData$`Record ID for point`) > 2)|>
dplyr::filter(!is.na(Taxon))
# exclude from the input datasets
speciesData3 <- speciesData[!c(speciesData$recordID %in% a2$`Record ID for point`), ]
speciesData <- speciesData3
# export for gap r testing
write.csv(speciesData, file = "temp/allVitisData072025.csv")
# order but n observations
nOrder <- speciesData |>
dplyr::group_by(taxon)|>
dplyr::count() |>
dplyr::arrange(n)
# read in bioclim layers  -------------------------------------------------
bioVars <- readRDS("data/geospatial_datasets/bioclim_layers/bioVar_1km.RDS")
templateRast <- bioVars[[1]]
## ecoregions
ecoregions <- sf::st_read("data/geospatial_datasets/ecoregions/tnc_terr_ecoregions.gpkg")
## protect lands
protectedAreas <- terra::rast("data/geospatial_datasets/protectedLands/wdpa_1km_all_.tif")
## buffer distance
bufferDist <- 50000
#vitis run
runVersion <- "run072025_1k"
# overwrite
overwrite <- FALSE
# create folder structure
#create folder
dir1 <- paste0("data/Vitis")
if(!dir.exists(dir1)){dir.create(dir1)}
dir2 <- paste0(dir1, "/", runVersion)
if(!dir.exists(dir2)){dir.create(dir2)}
species <- sort(unique(speciesData$taxon))
# generate folder paths
erroredSpecies <- list(noLatLon = c(),
lessThenEight = c(),
noSDM = c(),
noHTML = c())
#
# # generate a summary CSV for vitis
summaryCSV <- summaryTable(species = species, runVersion = runVersion)
#
# # generate a summary CSV for vitis
source("R2/summarize/summaryTable.R")
summaryCSV <- summaryTable(species = species, runVersion = runVersion)
View(summaryCSV)
write_csv(x = summaryCSV, file = paste0("data/Vitis/summaryTable_",runVersion,".csv"))
# compile all modeling data
amd <- list.files(dir1, pattern = "allmodelData.csv", full.names = TRUE, recursive = TRUE)
amd2 <- amd[grepl(pattern = runVersion, x = amd)]
#empty df for storing data from the loop
df4 <- data.frame()
# loop over species
for(p in seq_along(species)){
p1 <- amd2[grepl(pattern = species[p],x = amd2)]
if(length(p1)==1){
p2 <- p1 |>
read.csv() |>
dplyr::filter(presence == 1)|>
dplyr::mutate(taxon = species[p])
df4 <- bind_rows(p2,df4)
}
}
df4
# generate input data set
inputData <- list(
data = df4,
species = species,
names = bioNames
)
bioNames <- read_csv("data/geospatial_datasets/bioclim_layers/variableNames_072025.csv")
bionames
bioNames
# generate input data set
inputData <- list(
data = df4,
species = species,
names = bioNames
)
# produce the document
rmarkdown::render(input = "R2/summarize/boxplotSummaries.Rmd",
output_format = "html_document",
output_dir = file.path(dir1),
output_file = paste0(runVersion,"_boxPlotSummary.html"),
params = list(
inputData = inputData),
envir = new.env(parent = globalenv())
# clean = F,
# encoding = "utf-8"
)
inputData
species <- inputData$species
data <- inputData$data
names <- inputData$names
# generate the plots then append them to a named list
for(i in seq_along(names$shortName)){
parameter <- names$shortName[i]
box1 <- generateBoxPlot(data = data,
names = names,
parameter = parameter)
l2 <- list("temp" = box1)
names(l2) <- parameter
if(i == 1){
plots <- l2
}else{
plots <- c(plots, l2)
}
}
plots
names
# generate the plots then append them to a named list
for(i in seq_along(names$vitisModelNames )){
parameter <- names$shortName[i]
box1 <- generateBoxPlot(data = data,
names = names,
parameter = parameter)
l2 <- list("temp" = box1)
names(l2) <- parameter
if(i == 1){
plots <- l2
}else{
plots <- c(plots, l2)
}
}
names
source("R2/summarize/boxplotSummaries.Rmd")
source("R2/summarize/generatreBoxPlots.R")
source("R2/summarize/generateBoxPlots.R")
# generate the plots then append them to a named list
for(i in seq_along(names$vitisModelNames )){
parameter <- names$shortName[i]
box1 <- generateBoxPlot(data = data,
names = names,
parameter = parameter)
l2 <- list("temp" = box1)
names(l2) <- parameter
if(i == 1){
plots <- l2
}else{
plots <- c(plots, l2)
}
}
# generate the plots then append them to a named list
for(i in seq_along(names$vitisModelNames )){
parameter <- names$vitisModelNames[i]
box1 <- generateBoxPlot(data = data,
names = names,
parameter = parameter)
l2 <- list("temp" = box1)
names(l2) <- parameter
if(i == 1){
plots <- l2
}else{
plots <- c(plots, l2)
}
}
parameter
box1 <- generateBoxPlot(data = data,
names = names,
parameter = parameter)
parameter = parameter
# grab the title
title <- names$`Current title`[names$vitisModelNames  == parameter]
# assign the model param
data2 <- data |>
# remove the glochidiatus row with the extreme outline
dplyr::filter(bio_01 > -30)|>
dplyr::select(taxon, type, feature = parameter) |>
dplyr::mutate(taxon = str_replace_all(taxon, "_", " ") )
# assign the model param
data2 <- data |>
# remove the glochidiatus row with the extreme outline
# dplyr::filter(bio_01 > -30)|>
dplyr::select(taxon, type, feature = parameter) |>
dplyr::mutate(taxon = str_replace_all(taxon, "_", " ") )
# only G points for the jitters
data3 <- data2 |>
dplyr::filter(type == "G")
# ggplot2 -----------------------------------------------------------------
## set the palette
## 8 is the max
total <- length(unique(data2$taxon))
bluePal <- c("#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c")
setPalette <- rep(x = bluePal, times = ceiling(total/7))[1:total]
# Box plot by group with jitter
fig <- ggplot(data = data2, aes(x = taxon, y = feature, fill = taxon)) +
geom_boxplot(outlier.shape = NA)+
scale_fill_manual(values = setPalette  ) +  # Set manual colors for boxplots based on taxon levels
# scale_fill_grey()+ # this works pretty well
geom_jitter(data = data3, fill ="#6300f0", alpha = 0.5, shape = 21, size = 1, position = position_jitter(width = 0.3))+
# Set manual colors for points based on type levels
coord_flip() +
labs(title = title)+
theme(legend.position="none",
axis.title.x = element_blank(),
axis.title.y = element_blank())
#export the figure
return(fig)
generateBoxPlot <- function(data,names,parameter){
# grab the title
title <- names$`Current title`[names$vitisModelNames  == parameter]
# assign the model param
data2 <- data |>
# remove the glochidiatus row with the extreme outline
# dplyr::filter(bio_01 > -30)|>
dplyr::select(taxon, type, feature = parameter) |>
dplyr::mutate(taxon = str_replace_all(taxon, "_", " ") )
# only G points for the jitters
data3 <- data2 |>
dplyr::filter(type == "G")
# ggplot2 -----------------------------------------------------------------
## set the palette
## 8 is the max
total <- length(unique(data2$taxon))
bluePal <- c("#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c")
setPalette <- rep(x = bluePal, times = ceiling(total/7))[1:total]
# Box plot by group with jitter
fig <- ggplot(data = data2, aes(x = taxon, y = feature, fill = taxon)) +
geom_boxplot(outlier.shape = NA)+
scale_fill_manual(values = setPalette  ) +  # Set manual colors for boxplots based on taxon levels
# scale_fill_grey()+ # this works pretty well
geom_jitter(data = data3, fill ="#6300f0", alpha = 0.5, shape = 21, size = 1, position = position_jitter(width = 0.3))+
# Set manual colors for points based on type levels
coord_flip() +
labs(title = title)+
theme(legend.position="none",
axis.title.x = element_blank(),
axis.title.y = element_blank())
# plotly work  ------------------------------------------------------------
# grab the title
# title <- names$`Current title`[names$shortName == parameter]
# # assign the model param
# vals <- data |>
#   dplyr::select(parameter) |>
#   pull()
# data2 <- data |>
#   dplyr::mutate(modelParam = vals)
#
# # select generate the plot
# fig <- plot_ly(data,
#                x = ~modelParam,
#                color = ~taxon,
#                type = "box",
#                boxpoints = "outlier",
#                line = list(width = 6),
#                pointpos = 0) |>
#   layout(boxmode = "group",
#          xaxis = list(title = title))|>
#   hide_legend()
#export the figure
return(fig)
}
# generate single sub plot and export individual elements
generateBoxPlot_export <- function(data,names,variables,exportLocation){
plots <- list()
for(i in variables){
# generate plot
p1 <- generateBoxPlot(data = data, names = names, parameter = i)
plots <- append(plots,list(p1))
}
# this doesn't visualize well but it might be useful for a different genus
# subplot <- subplot(plots, nrows = 5,shareY = TRUE,titleX = TRUE)
}
# generate the plots then append them to a named list
for(i in seq_along(names$vitisModelNames )){
parameter <- names$vitisModelNames[i]
box1 <- generateBoxPlot(data = data,
names = names,
parameter = parameter)
l2 <- list("temp" = box1)
names(l2) <- parameter
if(i == 1){
plots <- l2
}else{
plots <- c(plots, l2)
}
}
plots$bio_01
plots$bio_1
if(renderBoxPlots == TRUE){
# compile all modeling data
amd <- list.files(dir1, pattern = "allmodelData.csv", full.names = TRUE, recursive = TRUE)
amd2 <- amd[grepl(pattern = runVersion, x = amd)]
#empty df for storing data from the loop
df4 <- data.frame()
# loop over species
for(p in seq_along(species)){
p1 <- amd2[grepl(pattern = species[p],x = amd2)]
if(length(p1)==1){
p2 <- p1 |>
read.csv() |>
dplyr::filter(presence == 1)|>
dplyr::mutate(taxon = species[p])
df4 <- bind_rows(p2,df4)
}
}
# generate input data set
inputData <- list(
data = df4,
species = species,
names = bioNames
)
# produce the document
rmarkdown::render(input = "R2/summarize/boxplotSummaries.Rmd",
output_format = "html_document",
output_dir = file.path(dir1),
output_file = paste0(runVersion,"_boxPlotSummary.html"),
params = list(
inputData = inputData),
envir = new.env(parent = globalenv())
# clean = F,
# encoding = "utf-8"
)
}
# compile all modeling data
amd <- list.files(dir1, pattern = "allmodelData.csv", full.names = TRUE, recursive = TRUE)
amd2 <- amd[grepl(pattern = runVersion, x = amd)]
#empty df for storing data from the loop
df4 <- data.frame()
# loop over species
for(p in seq_along(species)){
p1 <- amd2[grepl(pattern = species[p],x = amd2)]
if(length(p1)==1){
p2 <- p1 |>
read.csv() |>
dplyr::filter(presence == 1)|>
dplyr::mutate(taxon = species[p])
df4 <- bind_rows(p2,df4)
}
}
# generate input data set
inputData <- list(
data = df4,
species = species,
names = bioNames
)
# produce the document
rmarkdown::render(input = "R2/summarize/boxplotSummaries.Rmd",
output_format = "html_document",
output_dir = file.path(dir1),
output_file = paste0(runVersion,"_boxPlotSummary.html"),
params = list(
inputData = inputData),
envir = new.env(parent = globalenv())
# clean = F,
# encoding = "utf-8"
)
plots
# produce the document
rmarkdown::render(input = "R2/summarize/boxplotSummaries.Rmd",
output_format = "html_document",
output_dir = file.path(dir1),
output_file = paste0(runVersion,"_boxPlotSummary.html"),
params = list(
inputData = inputData),
envir = new.env(parent = globalenv())
# clean = F,
# encoding = "utf-8"
)
library("factoextra")
library("FactoMineR")
# helper function
visualizeAndSave <- function(pcaplot, title, subtitle, tiltX = FALSE){
# more direct visualization of the plots
p1 <- ggpubr::ggpar(pcaplot,
title = title,
subtitle = subtitle,
legend.title = "Taxon Group",
legend.position = "top",
ggtheme = theme_gray()
)
p1
#save result
# ggexport(plotlist = p1,
#          filename = paste0("outputs/pca/july2024exports/",subtitle,".png"))
# width = 1200,
# height = 800,
# res = 300)
}
d2 <- data[,c(30, 3:28)]
try(
rmarkdown::render(input = "R2/summarize/singleSpeciesSummary_1k.Rmd",
output_format = "html_document",
output_dir =  "data/Vitis/speciesSummaryHTML",  # file.path(allPaths$result),
output_file = paste0(j,"_Summary_fnaFilter"),
params = list(
reportData = reportData),
envir = new.env(parent = globalenv())
# clean = F,
# encoding = "utf-8"
)
)
try(
rmarkdown::render(input = "R2/summarize/singleSpeciesSummary_1k.Rmd",
output_format = "html_document",
output_dir =  "data/Vitis/speciesSummaryHTML",  # file.path(allPaths$result),
output_file = paste0(j,"_Summary_fnaFilter"),
params = list(
reportData = reportData),
envir = new.env(parent = globalenv())
# clean = F,
# encoding = "utf-8"
)
)
# produce the document
rmarkdown::render(input = "R2/summarize/boxplotSummaries.Rmd",
output_format = "html_document",
output_dir = file.path(dir1),
output_file = paste0(runVersion,"_boxPlotSummary.html"),
params = list(
inputData = inputData),
envir = new.env(parent = globalenv())
# clean = F,
# encoding = "utf-8"
)
# produce the document
rmarkdown::render(input = "R2/summarize/boxplotSummaries.Rmd",
output_format = "html_document",
output_dir = file.path(dir1),
output_file = paste0(runVersion,"_boxPlotSummary.html"),
params = list(
inputData = inputData),
envir = new.env(parent = globalenv())
# clean = F,
# encoding = "utf-8"
)
# produce the document
rmarkdown::render(input = "R2/summarize/boxplotSummaries.Rmd",
output_format = "html_document",
output_dir = file.path(dir1),
output_file = paste0(runVersion,"_boxPlotSummary.html"),
params = list(
inputData = inputData),
envir = new.env(parent = globalenv())
# clean = F,
# encoding = "utf-8"
)
library(readr)
mappings <- read_csv("data/countyMaps/mappings.csv")
View(mappings)
