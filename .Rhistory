,"Vitis nesbittiana"
,"Vitis peninsularis"
,"Vitis lincecumii"
,"Vitis blancoi"
,"Vitis popenoei"
,"Vitis x novae-angliae"
,"Vitis baileyana"
,"Vitis cinerea var. cinerea"
,"Vitis bourgaeana"
,"Vitis simpsonii"
,"Vitis shuttleworthii"
,"Vitis palmata"
,"Vitis aestivalis var. bicolor"
,"Vitis aestivalis var. aestivalis"
,"Vitis tiliifolia")
rerun
rerun[21]
# create unique path for summary HTML docs
p1 <- paste0("data/Vitis/speciesSummaryHTML/",runVersion)
if(!dir.exists(p1)){
dir.create(p1)
}
print(j)
#generate paths for exporting data
allPaths <- definePaths(dir1 = dir1,
j = j,
runVersion = runVersion)
# create directories if needed
generateFolders(allPaths)
# process data
## species specific data
sd1 <- speciesData |>
dplyr::filter(taxon == j )
# write_csv(sd1, "temp/doania.csv" )
## counts data
c1 <- write_CSV(path = allPaths$countsPaths,
overwrite = TRUE,
function1 = generateCounts(speciesData = sd1))
sd1
overwrite <- TRUE
j
rerun[23]
rerun
rerun[21]
j <- rerun[21]
# create unique path for summary HTML docs
p1 <- paste0("data/Vitis/speciesSummaryHTML/",runVersion)
if(!dir.exists(p1)){
dir.create(p1)
}
print(j)
#generate paths for exporting data
allPaths <- definePaths(dir1 = dir1,
j = j,
runVersion = runVersion)
# create directories if needed
generateFolders(allPaths)
# process data
## species specific data
sd1 <- speciesData |>
dplyr::filter(taxon == j )
sd1
terra::plot(sd1)
overwrite <- FALSE
# write_csv(sd1, "temp/doania.csv" )
## counts data
c1 <- write_CSV(path = allPaths$countsPaths,
overwrite = TRUE,
function1 = generateCounts(speciesData = sd1))
#srsex
srsex <- write_CSV(path = allPaths$srsExPath,
overwrite = TRUE,
function1 = srs_exsitu(sp_counts = c1))
# check for no lat lon data
if(c1$totalUseful == 0){
erroredSpecies$noLatLon <- c(erroredSpecies$noLatLon, j)
next
print("next")
}
## create the inital spatial object
sp1 <- write_GPKG(path = allPaths$spatialDataPath,
overwrite = TRUE,
function1 = createSF_Objects(speciesData = sd1) %>%
removeDuplicates()
)
terra::plot(sp1)
# apply FNA filter if possible.
sp1 <- write_GPKG(path = allPaths$spatialDataPath,
overwrite = TRUE, # this needs to stay true otherwise the call above will be used.
function1 = applyFNA(speciesPoints = sp1,
fnaData = fnaData,
states = naStates))
## define natural area based on ecoregions
natArea <- write_GPKG(path = allPaths$natAreaPath,
overwrite = TRUE,
function1 = nat_area_shp(speciesPoints = sp1,
ecoregions = ecoregions))
terra::plot(natArea)
## define number of background points
b_Number <- numberBackground(natArea = natArea)
## generate GA50 objects
g_buffer <- write_Rast(path = allPaths$ga50Path,
overwrite = overwrite,
function1 = create_buffers(speciesPoints = sp1,
natArea = natArea,
bufferDist = bufferDist,
templateRast = templateRast))
## associate observations with bioclim data and spatial thin
m_data1 <- write_CSV(path = allPaths$allDataPath,
overwrite = overwrite,
generateModelData(speciesPoints = sp1,
natArea = natArea,
bioVars = bioVars,
b_Number = b_Number))
# exporting with type column now removing for consistenty
m_data <- m_data1 |>
dplyr::select(-type)
# remove duplicated background data
presence <- m_data[m_data$presence == 1,]
absence <- m_data[m_data$presence != 1,]
dubs <- duplicated(absence[,2:27])
absence <- absence[!dubs, ]
m_data <- bind_rows(presence, absence)
## perform variable selection
v_data <- write_RDS(path = allPaths$variablbeSelectPath,
overwrite = overwrite,
function1 = varaibleSelection(modelData = m_data,
parallel = TRUE))
## prepare data for maxent model
rasterInputs <- write_Rast(path = allPaths$prepRasters,
overwrite = overwrite,
function1 = cropRasters(natArea = natArea,
bioVars = bioVars,
selectVars = v_data))
## perform maxent model
### tabular data
sdm_results <- write_RDS(path = allPaths$sdmResults,
overwrite = overwrite,
function1 = runMaxnet(selectVars = v_data,
rasterData = rasterInputs))
## raster objects
projectsResults <- write_RDS(path = allPaths$modeledRasters,
overwrite = overwrite,
function1 = rasterResults(sdm_result))
## generate evaluationTable
evalTable <- write_CSV(path = allPaths$evalTablePath,
overwrite = overwrite,
function1 = evaluateTable(sdm_result = sdm_results))
## generate threshold rasters
thres <- write_Rast(path =  allPaths$thresPath,
overwrite = overwrite,
function1 = generateThresholdModel(evalTable = evalTable,
rasterResults = projectsResults))
thres
terra::plot(thres)
## crop GA50 to threshold area
g_bufferCrop <- write_Rast(path = allPaths$g50_bufferPath,
overwrite = overwrite,
function1 = cropG_Buffer(ga50 = g_buffer,
thres = thres))
# Gap Analysis Methods  ---------------------------------------------------
# insitu
## srsin
srsin <- write_CSV(path = allPaths$srsinPath,
overwrite  = overwrite,
function1 = srs_insitu(occuranceData = sp1,
thres = thres,
protectedArea =protectedAreas ))
## ersin
ersin <- write_CSV(path = allPaths$ersinPath,
overwrite  = overwrite,
function1 = ers_insitu(occuranceData = sp1,
nativeArea = natArea,
protectedArea = protectedAreas,
thres = thres,
rasterPath = allPaths$ersinRast))
## grsin
grsin <-  write_CSV(path = allPaths$grsinPath,
overwrite  = overwrite ,
function1 = grs_insitu(occuranceData = sp1,
protectedArea = protectedAreas,
thres = thres))
## fcsin
fcsin <- write_CSV(path = allPaths$fcsinPath,
overwrite  = overwrite ,
function1 = fcs_insitu(srsin = srsin,
grsin = grsin,
ersin = ersin,
noModel = FALSE
))
#exsitu
##ersex
ersex <- write_CSV(path = allPaths$ersexPath,
overwrite  = TRUE,
function1 = ers_exsitu(speciesData = sd1,
thres = thres,
natArea = natArea,
ga50 = g_bufferCrop,
rasterPath = allPaths$ersexRast))
##grsex
grsex <- write_CSV(path = allPaths$grsexPath,
overwrite  = overwrite,
function1 = grs_exsitu(speciesData = sd1,
ga50 = g_bufferCrop,
thres = thres))
##fcsex
fcsex <- write_CSV(path = allPaths$fcsexPath,
overwrite  = TRUE,
function1 = fcs_exsitu(srsex = srsex,
grsex = grsex,
ersex = ersex,
noModel = FALSE))
#combined measure
fcsCombined <- write_CSV(path = allPaths$fcsCombinedPath,
overwrite  = TRUE,
function1 = fcs_combine(fcsin = fcsin,
fcsex = fcsex))
#gather features for RMD
## just a helper function to reduce the number of input for the RMD
reportData <- write_RDS(path = allPaths$summaryDataPath,
overwrite = TRUE,
function1 = grabData(fscCombined = fcsCombined,
ersex = ersex,
fcsex = fcsex,
fcsin = fcsin,
evalTable = evalTable,
g_bufferCrop = g_bufferCrop,
thres = thres,
projectsResults = projectsResults,
occuranceData = sp1,
v_data = v_data,
g_buffer = g_buffer,
natArea = natArea,
protectedAreas = protectedAreas,
countsData = c1,
variableImportance = allPaths$variablbeSelectPath,
NoModel = FALSE))
# Rescale all the imagery for the 1km runs  -------------------------------
##   "prj_threshold.tif", "ga50_masked.tif","ers_ex_gaps.tif","ers_in_gaps.tif"
for(i in c("prj_threshold.tif", "ga50_masked.tif","ers_ex_gaps.tif","ers_in_gaps.tif")){
# grap all files
allFiles <- list.files( path = dir1,
pattern =  i,
full.names = TRUE,
recursive = TRUE)
# filter to current run version
files2 <- allFiles[grepl(pattern = runVersion, x = allFiles)]
for(file in files2){
# generate export name
export <-sub("\\.tif$", "_5.tif", file)
# resample if needed
if(!file.exists(export)){
print(file)
r2 <- resampleRast(rast = terra::rast(file))
terra::writeRaster(x = r2, filename = export)
}
}
}
g4 <- terra::rast("data/Vitis/Vitis tiliifolia/run08282025_1k/results/prj_threshold.tif")
terra::plot(g4)
overwrite<-TRUE
# Rescale all the imagery for the 1km runs  -------------------------------
##   "prj_threshold.tif", "ga50_masked.tif","ers_ex_gaps.tif","ers_in_gaps.tif"
for(i in c("prj_threshold.tif", "ga50_masked.tif","ers_ex_gaps.tif","ers_in_gaps.tif")){
# grap all files
allFiles <- list.files( path = dir1,
pattern =  i,
full.names = TRUE,
recursive = TRUE)
# filter to current run version
files2 <- allFiles[grepl(pattern = runVersion, x = allFiles)]
for(file in files2){
# generate export name
export <-sub("\\.tif$", "_5.tif", file)
# resample if needed
# if(!file.exists(export)){
print(file)
r2 <- resampleRast(rast = terra::rast(file))
terra::writeRaster(x = r2, filename = export)
}
# }
}
# Rescale all the imagery for the 1km runs  -------------------------------
##   "prj_threshold.tif", "ga50_masked.tif","ers_ex_gaps.tif","ers_in_gaps.tif"
for(i in c("prj_threshold.tif", "ga50_masked.tif","ers_ex_gaps.tif","ers_in_gaps.tif")){
# grap all files
allFiles <- list.files( path = dir1,
pattern =  i,
full.names = TRUE,
recursive = TRUE)
# filter to current run version
files2 <- allFiles[grepl(pattern = runVersion, x = allFiles)]
for(file in files2){
# generate export name
export <-sub("\\.tif$", "_5.tif", file)
# resample if needed
# if(!file.exists(export)){
print(file)
r2 <- resampleRast(rast = terra::rast(file))
terra::writeRaster(x = r2, filename = export)
}
# }
}
# storing summaries data in run folders
dir2 <- paste0(dir1, "/", runVersion)
# generate summary of all the models --------------------------------------
path1 <- paste0(dir2,"/speciesrichness.tif")
path2 <- paste0(dir2,"/speciesUsed_speciesrichness.csv")
path3 <- paste0(dir2,"/ga50_speciesrichness.tif")
path4 <- paste0(dir2, "/ga50speciesUsed_speciesrichness.csv")
path5 <- paste0(dir2,"/protectedAreaSpeciesRichness.csv")
path6 <- paste0(dir2,"/ersexRichness.tif")
path7 <- paste0(dir2,"/ersex_speciesUsed_Richness.csv")
path8 <- paste0(dir2,"/ersinRichness.tif")
path9 <- paste0(dir2,"/ersin_speciesUsed_Richness.tif")
path10 <- paste0(dir2,"/protectedAreaSpeciesPointRichness.csv")
# Rescale all the imagery for the 1km runs  -------------------------------
##   "prj_threshold.tif", "ga50_masked.tif","ers_ex_gaps.tif","ers_in_gaps.tif"
for(i in c("prj_threshold.tif", "ga50_masked.tif","ers_ex_gaps.tif","ers_in_gaps.tif")){
# grap all files
allFiles <- list.files( path = dir1,
pattern =  i,
full.names = TRUE,
recursive = TRUE)
# filter to current run version
files2 <- allFiles[grepl(pattern = runVersion, x = allFiles)]
for(file in files2){
# generate export name
export <-sub("\\.tif$", "_5.tif", file)
# resample if needed
# if(!file.exists(export)){
print(file)
r2 <- resampleRast(rast = terra::rast(file))
terra::writeRaster(x = r2, filename = export, overwrite = TRUE)
}
# }
}
# this takes a while to run so be careful
## generate the species richness file
if(!file.exists(path1) | isTRUE(overwrite)){
# generate specific richness map
richness <- generateSpeciesRichnessMap(directory = dir1,
runVersion = runVersion,
rasterFileName = "prj_threshold_5.tif")
terra::writeRaster(x = richness$richnessTif,
filename = path1,
overwrite  = TRUE)
# need to convert to a df before writing
df <- data.frame(speciesUsed = richness$speciesUsed)
write_csv(x = df,
file = path2)
}
# generate some improved sumaries of species richness  --------------------
r1 <- terra::rast("data/Vitis/run08282025_1k/speciesrichness.tif")
us <- terra::vect(rnaturalearth::ne_states(iso_a2 = "US"))
mex <- terra::vect(rnaturalearth::ne_states(iso_a2 = "MX"))
can <- terra::vect(rnaturalearth::ne_states(iso_a2 = "CA"))
# aggregate and simplify
states <- terra::vect(c(us,mex,can))
terra::subset(select = c("iso_a2", "name" ))
states <- states[, c("iso_a2", "name" )]
# get the max values per state
states$maxValues <- terra::extract(x = r1, states, fun = max, na.rm = TRUE)[,2]
# get the max values per state
states$maxValues <- terra::extract(x = r1, states, fun = max, na.rm = TRUE)[,2]
pal <- colorNumeric(
palette = "YlOrRd",
domain = states$maxValues
)
# --- 6. Build the Leaflet Map ---
m <- leaflet(data = states) %>%
# Add a light-colored base map
addProviderTiles(providers$CartoDB.Positron) %>%
# Add the state polygons
addPolygons(
fillColor = ~pal(maxValues), # Color based on maxValues
weight = 1,                 # Border thickness
opacity = 1,                # Border opacity
color = "white",            # Border color
fillOpacity = 0.7,          # Fill opacity
# Add mouse-over highlights
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE
),
# Add mouse-over labels
label = ~paste(name, ": ", maxValues)
)
m
# generate some improved sumaries of species richness  --------------------
r1 <- terra::rast("data/Vitis/run08282025_1k/speciesrichness.tif")
terra::plot(r1)
# --- 6. Build the Leaflet Map ---
m <- leaflet(data = states) %>%
# Add a light-colored base map
addProviderTiles(providers$CartoDB.Positron) %>%
# Add the state polygons
addPolygons(
fillColor = ~pal(maxValues), # Color based on maxValues
weight = 1,                 # Border thickness
opacity = 1,                # Border opacity
color = "white",            # Border color
fillOpacity = 0.7,          # Fill opacity
# Add mouse-over highlights
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE
),
# Add mouse-over labels
label = ~paste(name, ": ", maxValues)
)
m
# same map with ecoregions  -----------------------------------------------
ecoregions <- sf::st_read("data/geospatial_datasets/ecoregions/tnc_terr_ecoregions.gpkg")
ecoregions$maxValues <- terra::extract(x = r1, ecoregions, fun = max, na.rm = TRUE)[,2]
vitisEco <- ecoregions[!is.nan(ecoregions$maxValues),]
vitisEco <- vitisEco[vitisEco$maxValues != 0,]
pal <- colorNumeric(
palette = "YlOrRd",
domain = vitisEco$maxValues
)
# --- 6. Build the Leaflet Map ---
m <- leaflet(data = vitisEco) %>%
# Add a light-colored base map
addProviderTiles(providers$CartoDB.Positron) %>%
# Add the state polygons
addPolygons(
fillColor = ~pal(maxValues), # Color based on maxValues
weight = 1,                 # Border thickness
opacity = 1,                # Border opacity
color = "white",            # Border color
fillOpacity = 0.7,          # Fill opacity
# Add mouse-over highlights
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE
),
# Add mouse-over labels
label = ~paste(ECO_NAME, ": ", maxValues)
)
m
overwrite <
overwrite
#   bind_cols()
#
# write_csv(x = errorDF,
#           file = paste0(dir1,"/","errorredSpecies_",runVersion,".csv"))
#
#
# # produce Run level Summaries ---------------------------------------------
# need to set overwrite to true to produce most of the layers
### big processing step...
## might need to revisit how these are being generated...
generateRunSummaries(dir1 = dir1,
runVersion = runVersion,
species = s2$taxon,
genus = "Vitis",
protectedAreas = protectedAreas,
overwrite = TRUE)
#   bind_cols()
#
# write_csv(x = errorDF,
#           file = paste0(dir1,"/","errorredSpecies_",runVersion,".csv"))
#
#
# # produce Run level Summaries ---------------------------------------------
# need to set overwrite to true to produce most of the layers
### big processing step...
## might need to revisit how these are being generated...
generateRunSummaries(dir1 = dir1,
runVersion = runVersion,
species = s2$taxon,
genus = "Vitis",
protectedAreas = protectedAreas,
overwrite = FALSE)
pacman::p_load(dplyr,readr)
##################
# vitis specific moves ----------------------------------------------------
folder <- "~/trueNAS/work/vitis2/m"
# vitis SDMS --------------------------------------------------------------
genus <- "Vitis"
modelRun <- "run08282025_1k"
# species
splist <- read_csv("temp/allVitisData082025.csv")|>
dplyr::filter(!is.na(taxon), genus == "Vitis")|>
dplyr::select(taxon)|>
distinct()
# files
files <- list.files("data/Vitis/speciesSummaryHTML/run08282025_1k",full.names = TRUE)
# what species are missing
for(i in splist$taxon){
vals <- grepl(pattern = i, x = files)
if(length(unique(vals)) != 2){
print(i)
}
}
# transfer the files
for(i in files){
print(i)
file.copy(i, folder, overwrite = TRUE)
}
# move the run summary
runsummary <- paste0("data/Vitis/",modelRun,"_Summary.html")
file.copy(runsummary, folder, overwrite = TRUE)
file.copy(paste0("data/Vitis/",modelRun,"_boxPlotSummary.html"), folder, overwrite = TRUE)
print("box plot summary doc copied")
