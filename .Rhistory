title = "SD of Distribution Model",
labels = c("low","","","","high"),
group = "SD of Distribution Model")
## Add control layers
m3 <- m2 |>
addLayersControl(position = "topleft", options = list(collapsed = FALSE,
autoZIndex = FALSE),
overlayGroups = c("Potential distribution model","Occurrences",
"Mean Distribution Model",
"Median Distribution Model",
"SD of Distribution Model"))|>
hideGroup(c("Mean Distribution Model",
"Median Distribution Model",
"SD of Distribution Model"))
m3
}else{
m1
}
j
printSpecies
# set the sigfig in the table
if(data$NoModel == FALSE){
eval1 <- data$modelEvaluation |>
dplyr::select(
"AUC" = "AUCtest" ,
"Normalized AUC" = "nAUC",
"Calibrated AUC" = "cAUC",
"Threshold Value" = "threshold_test",
"Sensitivity"  = "sensi_test",
"Specificity" = "speci_test",
"Mathews Correlation" = "matthews.cor_test",
"Cohen's kappa" = "kappa_index_test"
) |>
dplyr::mutate_all(.funs = sigfig)
DT::datatable(eval1,
class = "hover",
options = list(dom = 't'))
}else{
"No model was generated for this species"
}
if(data$NoModel == FALSE){
varTable <- data$variableImportance |>
dplyr::mutate(across(c('importance'), round, 3))|>
dplyr::select("Predictor variable name" = `Current title`,
"Relative importance to model" =  importance,
"Included in the modeling process" = includeInFinal,
"Abbrevaition" = varNames
)|>
dplyr::arrange(desc(`Relative importance to model`))|>
dplyr::arrange(desc(`Included in the modeling process`))
# display table
DT::datatable(varTable,
rownames = FALSE,
class = "compact")
}else{
"No model was generated for this species"
}
exCounts <- data$countsData |>
dplyr::mutate(across(c('species'), str_replace_all, pattern = "_", replacement = " "))|>
dplyr::select("Taxon" = species,
"Total with coordinates" = totalUseful,
"Total G records" = totalGRecords,
"Total G with coordinates" = totalGUseful,
"Total H records" = totalHRecords,
"Total H with coordinates" = totalHUseful)
exScores <- data$fcsex |>
dplyr::mutate("SRS ex situ" = sigfig(SRS),
"GRS ex situ" = sigfig(GRS),
"ERS ex situ" = sigfig(ERS),
"FCS ex situ" = sigfig(FCS))|>
dplyr::select("SRS ex situ","GRS ex situ","ERS ex situ","FCS ex situ")|>
dplyr::mutate(
"FCS ex situ priority category" = case_when(
`FCS ex situ` >= 75 ~ "LP",
`FCS ex situ` >=50 & `FCS ex situ` < 75 ~ "MP",
`FCS ex situ` >=25 & `FCS ex situ` < 50 ~ "HP",
`FCS ex situ` < 25 ~ "UP"
)
)
# combine the data
exTables <- bind_cols(exCounts,exScores)
#visualize
DT::datatable(exTables,
rownames = FALSE,
class = "compact",
options = list(dom = 't'))
grsexMap
data$NoModel == FALSE
# generate the GRSex map
ex2 <- leaflet(width = "100%")|>
addProviderTiles(providers$Esri.WorldGrayCanvas)|>
# Outline of all ecoregions
addPolygons(
data = allEcos,
group = "All ecoregions",
weight = 2,
stroke = TRUE,
fill = TRUE,
fillOpacity = 0.2,
popup = allEcos$ECO_NAME,
color = "#60616050"
)
ex2
# generate the GRSex map
ex1 <- leaflet(width = "100%")|>
addProviderTiles(providers$Esri.WorldGrayCanvas)|>
#GRSex raster
addRasterImage(
x = raster(grsexMap),
colors = grsexColor,
group = "GRS ex situ",
project = FALSE)   |>
#G points
addCircleMarkers(
data = occData[occData$type == "G",],
color = ~ color,
opacity = 1,
radius = 1,
group = "GRS ex situ",
stroke = 1,
popup = ~ popup
) |>
#add legend
leaflet::addLegend(
position = "bottomright",
color = exPal,
title = "Ex Situ geographical representativeness",
labels = c("Native country-ecoregion area", "Potential distribution model", "Areas < 50 km from an ex situ collection"),
group = "GRS ex situ"
)
ex1
if(exTables$`Total G with coordinates` == 0){
# generate the GRSex map
ex2 <- leaflet(width = "100%")|>
addProviderTiles(providers$Esri.WorldGrayCanvas)|>
# Outline of all ecoregions
addPolygons(
data = allEcos,
group = "All ecoregions",
weight = 2,
stroke = TRUE,
fill = TRUE,
fillOpacity = 0.2,
popup = allEcos$ECO_NAME,
color = "#60616050"
)
}else{ # G points with valid lat lon are present
# generate the GRSex map
ex1 <- leaflet(width = "100%")|>
addProviderTiles(providers$Esri.WorldGrayCanvas)|>
#GRSex raster
addRasterImage(
x = raster(grsexMap),
colors = grsexColor,
group = "GRS ex situ",
project = FALSE)   |>
#G points
addCircleMarkers(
data = occData[occData$type == "G",],
color = ~ color,
opacity = 1,
radius = 1,
group = "GRS ex situ",
stroke = 1,
popup = ~ popup
) |>
#add legend
leaflet::addLegend(
position = "bottomright",
color = exPal,
title = "Ex Situ geographical representativeness",
labels = c("Native country-ecoregion area", "Potential distribution model", "Areas < 50 km from an ex situ collection"),
group = "GRS ex situ"
)
# generate the ERSex map
if(ersex$ERS == 100){
ex2 <- ex1 |>
# Outline of all ecoregions
addPolygons(
data = allEcos,
group = "All ecoregions",
weight = 2,
stroke = TRUE,
fill = TRUE,
fillOpacity = 0.2,
popup = allEcos$ECO_NAME,
color = "#60616050"
)
}else{
ex2 <- ex1 |>
# Ecoregion Raster Layers
addRasterImage(raster(ecoRast),
group = "ERS ex situ",
colors = ecoColor,
project = FALSE)|>
leaflet::addLegend(colors = ecoReg$color,
group = "ERS ex situ",
labels = ecoReg$ECO_NAME) |>
# Outline of all ecoregions
addPolygons(
data = allEcos,
group = "All ecoregions",
weight = 2,
stroke = TRUE,
fill = TRUE,
fillOpacity = 0.2,
popup = allEcos$ECO_NAME,
color = "#60616050"
)
}
}
ex2
ecoRast
ecoRast
terra::plot(ecpRast)
ecoRast
overwrite <- TRUE
## create the inital spatial object
sp1 <- write_GPKG(path = allPaths$spatialDataPath,
overwrite = overwrite,
function1 = createSF_Objects(speciesData = sd1) %>%
removeDuplicates()
)
qtm(sp1)
# apply FNA filter if possible.
sp1 <- write_GPKG(path = allPaths$spatialDataPath,
overwrite = overwrite, # this needs to stay true otherwise the call above will be used.
function1 = applyFNA(speciesPoints = sp1,
fnaData = fnaData,
states = naStates))
qtm(sp1)
## define natural area based on ecoregions
natArea <- write_GPKG(path = allPaths$natAreaPath,
overwrite = overwrite,
function1 = nat_area_shp(speciesPoints = sp1,
ecoregions = ecoregions))
## define number of background points
b_Number <- numberBackground(natArea = natArea)
## generate GA50 objects
g_buffer <- write_Rast(path = allPaths$ga50Path,
overwrite = overwrite,
function1 = create_buffers(speciesPoints = sp1,
natArea = natArea,
bufferDist = bufferDist,
templateRast = templateRast))
terra::plot(g_buffer)
qtm(g_buffer)
## associate observations with bioclim data and spatial thin
m_data1 <- write_CSV(path = allPaths$allDataPath,
overwrite = overwrite,
generateModelData(speciesPoints = sp1,
natArea = natArea,
bioVars = bioVars,
b_Number = b_Number))
# condition for at least 8 observations
## attempt to model the data
if(nrow(sp1) >=8){
print("Modeling")
## define number of background points
b_Number <- numberBackground(natArea = natArea)
## generate GA50 objects
g_buffer <- write_Rast(path = allPaths$ga50Path,
overwrite = overwrite,
function1 = create_buffers(speciesPoints = sp1,
natArea = natArea,
bufferDist = bufferDist,
templateRast = templateRast))
## associate observations with bioclim data and spatial thin
m_data1 <- write_CSV(path = allPaths$allDataPath,
overwrite = overwrite,
generateModelData(speciesPoints = sp1,
natArea = natArea,
bioVars = bioVars,
b_Number = b_Number))
# exporting with type column now removing for consistenty
m_data <- m_data1 |>
dplyr::select(-type)
# remove duplicated background data
presence <- m_data[m_data$presence == 1,]
absence <- m_data[m_data$presence != 1,]
dubs <- duplicated(absence[,2:27])
absence <- absence[!dubs, ]
m_data <- bind_rows(presence, absence)
## perform variable selection
v_data <- write_RDS(path = allPaths$variablbeSelectPath,
overwrite = overwrite,
function1 = varaibleSelection(modelData = m_data,
parallel = TRUE))
## prepare data for maxent model
rasterInputs <- write_Rast(path = allPaths$prepRasters,
overwrite = overwrite,
function1 = cropRasters(natArea = natArea,
bioVars = bioVars,
selectVars = v_data))
## perform maxent model
### tabular data
sdm_results <- write_RDS(path = allPaths$sdmResults,
overwrite = overwrite,
function1 = runMaxnet(selectVars = v_data,
rasterData = rasterInputs))
## condition to test if model was suscessfull produced.
if(!is.null(sdm_results)){
print("conservation metrics")
## raster objects
projectsResults <- write_RDS(path = allPaths$modeledRasters,
overwrite = overwrite,
function1 = rasterResults(sdm_result))
## generate evaluationTable
evalTable <- write_CSV(path = allPaths$evalTablePath,
overwrite = overwrite,
function1 = evaluateTable(sdm_result = sdm_results))
## generate threshold rasters
thres <- write_Rast(path =  allPaths$thresPath,
overwrite = overwrite,
function1 = generateThresholdModel(evalTable = evalTable,
rasterResults = projectsResults))
## generate a mess map
## generate a kernal density map
## crop GA50 to threshold area
g_bufferCrop <- write_Rast(path = allPaths$g50_bufferPath,
overwrite = overwrite,
function1 = cropG_Buffer(ga50 = g_buffer,
thres = thres))
# Gap Analysis Methods  ---------------------------------------------------
# insitu
## srsin
srsin <- write_CSV(path = allPaths$srsinPath,
overwrite = overwrite,
function1 = srs_insitu(occuranceData = sp1,
thres = thres,
protectedArea =protectedAreas ))
## ersin
ersin <- write_CSV(path = allPaths$ersinPath,
overwrite = overwrite,
function1 = ers_insitu(occuranceData = sp1,
nativeArea = natArea,
protectedArea = protectedAreas,
thres = thres,
rasterPath = allPaths$ersinRast))
## grsin
grsin <-  write_CSV(path = allPaths$grsinPath,
overwrite = overwrite ,
function1 = grs_insitu(occuranceData = sp1,
protectedArea = protectedAreas,
thres = thres))
## fcsin
fcsin <- write_CSV(path = allPaths$fcsinPath,
overwrite = overwrite ,
function1 = fcs_insitu(srsin = srsin,
grsin = grsin,
ersin = ersin,
noModel = FALSE
))
#exsitu
##ersex
ersex <- write_CSV(path = allPaths$ersexPath,
overwrite = overwrite,
function1 = ers_exsitu(speciesData = sd1,
thres = thres,
natArea = natArea,
ga50 = g_bufferCrop,
rasterPath = allPaths$ersexRast))
##grsex
grsex <- write_CSV(path = allPaths$grsexPath,
overwrite = overwrite,
function1 = grs_exsitu(speciesData = sd1,
ga50 = g_bufferCrop,
thres = thres))
##fcsex
fcsex <- write_CSV(path = allPaths$fcsexPath,
overwrite = overwrite,
function1 = fcs_exsitu(srsex = srsex,
grsex = grsex,
ersex = ersex,
noModel = FALSE))
#combined measure
fcsCombined <- write_CSV(path = allPaths$fcsCombinedPath,
overwrite = overwrite,
function1 = fcs_combine(fcsin = fcsin,
fcsex = fcsex))
#gather features for RMD
## just a helper function to reduce the number of input for the RMD
reportData <- write_RDS(path = allPaths$summaryDataPath,
overwrite = TRUE,
function1 = grabData(fscCombined = fcsCombined,
ersex = ersex,
fcsex = fcsex,
fcsin = fcsin,
evalTable = evalTable,
g_bufferCrop = g_bufferCrop,
thres = thres,
projectsResults = projectsResults,
occuranceData = sp1,
v_data = v_data,
g_buffer = g_buffer,
natArea = natArea,
protectedAreas = protectedAreas,
countsData = c1,
variableImportance = allPaths$variablbeSelectPath,
NoModel = FALSE))
}else{ # no sdm results
erroredSpecies$noSDM <- c(erroredSpecies$noSDM, j)
print("conservation Metrics")
#Complete conservation assessments without models
## srsin
srsin <- write_CSV(path = allPaths$srsinPath,
overwrite = overwrite,
function1 = srs_insitu(occuranceData = sp1,
thres = NA,
protectedArea =protectedAreas ))
## fcsin
fcsin <- write_CSV(path = allPaths$fcsinPath,
overwrite = overwrite,
function1 = fcs_insitu(srsin = srsin,
grsin = grsin,
ersin = ersin,
noModel = TRUE))
##fcsex
fcsex <- write_CSV(path = allPaths$fcsexPath,
overwrite = overwrite,
function1 = fcs_exsitu(srsex = srsex,
grsex = grsex,
ersex = ersex,
noModel = TRUE))
#combined measure
fcsCombined <- write_CSV(path = allPaths$fcsCombinedPath,
overwrite = overwrite,
function1 = fcs_combine(fcsin = fcsin,
fcsex = fcsex))
# generate report data for species
reportData <- write_RDS(path = allPaths$summaryDataPath,
overwrite = overwrite,
function1 = grabData(fscCombined = fcsCombined,
ersex = NA,
fcsex = fcsex,
fcsin = fcsin,
evalTable = NA,
g_bufferCrop = NA,
thres = NA,
projectsResults = NA,
occuranceData = sp1,
v_data = NA,
g_buffer = NA,
natArea = natArea,
protectedAreas = protectedAreas,
countsData = c1,
variableImportance = allPaths$variablbeSelectPath,
NoModel = TRUE))
}
}else{ # end of attempt to model
erroredSpecies$lessThenEight <- c(erroredSpecies$lessThenEight, j)
### need the FCS summary data for the full run summary
## srsin can be calculated for all species with at least one lat lon value
## if no model is present (GRSin and ERSin are NA)
## if no G points are present (srsex, grsex, and ersex are 0)
## if g Points present but no model (srsex is calculated, grsex, and ersex are NA )
# pull n G points from
gPoints <- c1$totalGUseful
#
srsin <- write_CSV(path = allPaths$srsinPath,
overwrite = overwrite,
function1 = srs_insitu(occuranceData = sp1,
thres = NA,
protectedArea =protectedAreas ))
fcsin <- write_CSV(path = allPaths$fcsinPath,
overwrite = overwrite,
function1 = fcs_insitu(srsin = srsin,
grsin = grsin,
ersin = ersin,
noModel = TRUE))
##fcsex
fcsex <- write_CSV(path = allPaths$fcsexPath,
overwrite = overwrite,
function1 = fcs_exsitu(srsex = srsex,
grsex = grsex,
ersex = ersex,
noModel = TRUE,
gPoints = gPoints))
#combined measure
fcsCombined <- write_CSV(path = allPaths$fcsCombinedPath,
overwrite = overwrite,
function1 = fcs_combine(fcsin = fcsin,
fcsex = fcsex))
reportData <- write_RDS(path = allPaths$summaryDataPath,
overwrite = overwrite,
function1 = grabData(fscCombined = fcsCombined,
ersex = NA,
fcsex = fcsex,
fcsin = fcsin,
evalTable = NA,
g_bufferCrop = NA,
thres = NA,
projectsResults = NA,
occuranceData = sp1,
v_data = NA,
g_buffer = NA,
natArea = natArea,
protectedAreas = protectedAreas,
countsData = c1,
variableImportance = NA,
NoModel = TRUE))
}
?generateSpeciesRichnessMap
# storing summaries data in run folders
dir2 <- paste0(dir1, "/", runVersion)
# generate summary of all the models --------------------------------------
path1 <- paste0(dir2,"/speciesrichness.tif")
path2 <- paste0(dir2,"/speciesUsed_speciesrichness.csv")
path3 <- paste0(dir2,"/ga50_speciesrichness.tif")
path4 <- paste0(dir2, "/ga50speciesUsed_speciesrichness.csv")
path5 <- paste0(dir2,"/protectedAreaSpeciesRichness.csv")
path6 <- paste0(dir2,"/ersexRichness.tif")
