# need to ensure functions are grabbed first
list.files(
path = "R2",
pattern = ".R",
full.names = TRUE,
recursive = TRUE
),
source
)
list.files(
path = "R2",
pattern = ".R",
full.names = TRUE,
recursive = TRUE
)
#source functions
lapply(
# need to ensure functions are grabbed first
list.files(
path = "R2",
pattern = ".R",
full.names = TRUE,
recursive = TRUE
),
source()
)
#source functions
lapply(
# need to ensure functions are grabbed first
list.files(
path = "R2",
pattern = ".R",
full.names = TRUE,
recursive = TRUE
),
source
)
#source functions
lapply(
# need to ensure functions are grabbed first
list.files(
path = "R2",
pattern = ".R",
full.names = TRUE,
recursive = TRUE
),
source
)
j
# process data
sp1 <- subsetSpecies(occuranceData =speciesData, species = j )
sp1
c1 <- generateCounts(speciesData = sp1)
c1
dirs
for(i in genera){
#create folder
dir1 <- paste0("data/",genera)
if(!dir.exists(dir1)){dir.create(dir1)}
# loop over species  ------------------------------------------------------
for(j in species){
dir2 <- paste0(dir1,"/",j)
if(!dir.exists(dir2)){dir.create(dir2)}
dirs <- paste0(
dir2,"/", runVersion ,"/", c("gap_analysis", "occurances", "results")
)
for(k in dirs){
if(!dir.exists(k))
{dir.create(k,recursive = T)}
}
}
# process data
sp1 <- subsetSpecies(occuranceData =speciesData, species = j )
c1 <- generateCounts(speciesData = sp1)
countsPath <- paste0(dirs[2], "/counts.csv")
}
countsPath
if(!file.exists(countsPath)){
write_csv(x = c1, file = countsPath)
}
# process data
## species specific data
sd1 <- subsetSpecies(occuranceData =speciesData, species = j )
## spatial object
sp1 <- createSF_Objects(speciesData = sd1)
#source functions
lapply(
# need to ensure functions are grabbed first
list.files(
path = "R2",
pattern = ".R",
full.names = TRUE,
recursive = TRUE
),
source
)
## spatial object
sp1 <- createSF_Objects(speciesData = sd1)
#' createSF_Objects
#'
#' @param speciesData : all species occurance data
#' @param species : species list with full taxon name
#'
#' @return : dataframe of species data with valid lat long values
createSF_Objects <- function(speciesData){
latLong <- speciesData %>%
mutate(latitude = as.numeric(as.character(latitude)),
longitude = as.numeric(as.character(longitude)))%>%
dplyr::filter(!is.na(latitude) | !is.na(longitude))
if(nrow(latLong)>0){
coord <- latLong %>%
sf::st_as_sf(coords = c("longitude","latitude"), crs = 4326)
}else{
print("there are no coodinate pairs for this species")
coord <- "no data available"
}
return(coord)
}
countryCheck <- function(sf_points, speciesList, countryLists){
# I don't have a great list of contries for dacaus so this is an optional element now
# makes me think we might
}
#' removeDuplicates
#'
#' @param sf_points : point objects for individual species
#' @param species : speciesList object
#'
#' @return : a thinned version on the observations data were any feature with
#' type == h and the same coordinates as another obervation has been removed.
removeDuplicates <- function(sf_points){
sf_points <- sf_points %>%
filter(!duplicated(geometry) & type =="H")
return(sf_points)
}
## spatial object
sp1 <- createSF_Objects(speciesData = sd1)
sp1
View(sd1)
j
species
j <- species[1]
j
dir2 <- paste0(dir1,"/",j)
if(!dir.exists(dir2)){dir.create(dir2)}
dirs <- paste0(
dir2,"/", runVersion ,"/", c("gap_analysis", "occurances", "results")
)
for(k in dirs){
if(!dir.exists(k))
{dir.create(k,recursive = T)}
}
# loop over species  ------------------------------------------------------
for(j in species){
dir2 <- paste0(dir1,"/",j)
if(!dir.exists(dir2)){dir.create(dir2)}
dirs <- paste0(
dir2,"/", runVersion ,"/", c("gap_analysis", "occurances", "results")
)
for(k in dirs){
if(!dir.exists(k))
{dir.create(k,recursive = T)}
}
}
# process data
## species specific data
sd1 <- subsetSpecies(occuranceData =speciesData, species = j )
## counts data
c1 <- generateCounts(speciesData = sd1)
countsPath <- paste0(dirs[2], "/counts.csv")
if(!file.exists(countsPath)){
write_csv(x = c1, file = countsPath)
}
## spatial object
sp1 <- createSF_Objects(speciesData = sd1)
sp1
i
j
species
j <- species[1]
j
dir2 <- paste0(dir1,"/",j)
if(!dir.exists(dir2)){dir.create(dir2)}
dirs <- paste0(
dir2,"/", runVersion ,"/", c("gap_analysis", "occurances", "results")
)
for(k in dirs){
if(!dir.exists(k))
{dir.create(k,recursive = T)}
}
# process data
## species specific data
sd1 <- subsetSpecies(occuranceData =speciesData, species = j )
sd1
## counts data
c1 <- generateCounts(speciesData = sd1)
countsPath <- paste0(dirs[2], "/counts.csv")
write_csv(x = c1, file = countsPath)
## spatial object
sp1 <- createSF_Objects(speciesData = sd1)
sp1
## spatial object
sp1 <- createSF_Objects(speciesData = sd1)%>%
removeDuplicates()
sp1
## spatial object
sp1 <- createSF_Objects(speciesData = sd1)
sp1
View(sp1)
duplicated(sp1$geometry)
sp1 %>%filter(!duplicated(geometry) & type =="H")
sp1 %>%filter(type =="H")
#subset out all g points
g_p <- sf_points[sf_points$type == "G"]
sf_points <- sp1
#subset out all g points
g_p <- sf_points %>%
filter(type=="G")%>%
filter(!duplicated(geometry))
g_p
h_p <- sf_points %>%
filter(type=="H")%>%
filter(!duplicated(geometry))
h_p
sf_p <- bind_rows(g_p, h_p)
#' removeDuplicates
#'
#' @param sf_points : point objects for individual species
#' @param species : speciesList object
#'
#' @return : a thinned version on the observations data were any feature with
#' type == h and the same coordinates as another obervation has been removed.
removeDuplicates <- function(sf_points){
#subset out all g points
g_p <- sf_points %>%
filter(type=="G")%>%
filter(!duplicated(geometry))
h_p <- sf_points %>%
filter(type=="H")%>%
filter(!duplicated(geometry))
sf_p <- bind_rows(g_p, h_p)
return(sf_p)
}
## spatial object
sp1 <- createSF_Objects(speciesData = sd1)%>%
removeDuplicates()
sp1
srs_exsitu <- function(sp_counts) {
# caluse for no g points
if(sp_counts$totalGRecords >= 1 & sp_counts$totalHRecords == 0){
srs <-100
}
#clause for no data
if (sp_counts$totalGRecords == 0 & sp_counts$totalHRecords ==0) {
srs <- 0
} else {
# clause for species with data
srs <- min(c(100,sp_counts$totalGRecords/sp_counts$totalHRecords*100))
}
#create data.frame with output
out_df <- data.frame(ID=species,
NTOTAL=sp_counts$totalRecords,
NTOTAL_COORDS=sp_counts$totalUseful,
NG= sp_counts$totalGRecords,
NG_COORDS=sp_counts$totalGUseful,
NH=sp_counts$totalHRecords,
NH_COORDS=sp_counts$totalHUseful,
SRS=srs)
write.csv(out_df,paste0(sp_dir,"/gap_analysis/exsitu/srs_result.csv"),row.names=F)
}
#srsex
srs_exsitu(sp_counts = c1)
sp_counts <- c1
# caluse for no g points
if(sp_counts$totalGRecords >= 1 & sp_counts$totalHRecords == 0){
srs <-100
}
sp_counts$totalGRecords >= 1
p_counts$totalHRecords == 0
sp_counts$totalGRecords >= 1 & sp_counts$totalHRecords == 0
srs <-100
#clause for no data
if (sp_counts$totalGRecords == 0 & sp_counts$totalHRecords ==0) {
srs <- 0
} else {
# clause for species with data
srs <- min(c(100,sp_counts$totalGRecords/sp_counts$totalHRecords*100))
}
sp_counts$species
#create data.frame with output
out_df <- data.frame(ID=sp_counts$species,
NTOTAL=sp_counts$totalRecords,
NTOTAL_COORDS=sp_counts$totalUseful,
NG= sp_counts$totalGRecords,
NG_COORDS=sp_counts$totalGUseful,
NH=sp_counts$totalHRecords,
NH_COORDS=sp_counts$totalHUseful,
SRS=srs)
out_df
srs_exsitu <- function(sp_counts) {
# caluse for no g points
if(sp_counts$totalGRecords >= 1 & sp_counts$totalHRecords == 0){
srs <-100
}
#clause for no data
if (sp_counts$totalGRecords == 0 & sp_counts$totalHRecords ==0) {
srs <- 0
} else {
# clause for species with data
srs <- min(c(100,sp_counts$totalGRecords/sp_counts$totalHRecords*100))
}
#create data.frame with output
out_df <- data.frame(ID=sp_counts$species,
NTOTAL=sp_counts$totalRecords,
NTOTAL_COORDS=sp_counts$totalUseful,
NG= sp_counts$totalGRecords,
NG_COORDS=sp_counts$totalGUseful,
NH=sp_counts$totalHRecords,
NH_COORDS=sp_counts$totalHUseful,
SRS=srs)
return(out_df)
}
#srsex
srs_exsitu(sp_counts = c1)
#srsex
srsex <- srs_exsitu(sp_counts = c1)
dirs[2]
dirs
### srsex
srsExPath <- paste0(dirs[1], "/srs_ex.csv")
#' Native Area shp
#'
#' @param species
#'
#' @return
#' @export
#'
#' @examples
nat_area_shp <- function(speciesPoints, ecoregions) {
crs(speciesPoints) <- crs(ecoregions)
ids <- speciesPoints %>%
sf::st_intersection(ecoregions)%>%
sf::st_drop_geometry()%>%
dplyr::select("ECO_ID_U")%>%
dplyr::distinct()%>%
pull()
natArea <- ecoregions[ecoregions$ECO_ID_U %in% ids, ]
return(natArea)
}
### define natural area based on ecoregions
natArea <- nat_area_shp(speciesPoints = sp1, ecoregions = ecoregions)
sp1
speciesPoints <- sp1
crs(sp1)
crs(ecoregions)
crs(speciesPoints) == crs(ecoregions)
ids <- speciesPoints %>%
sf::st_intersection(ecoregions)%>%
sf::st_drop_geometry()%>%
dplyr::select("ECO_ID_U")%>%
dplyr::distinct()%>%
pull()
sf::sf_use_s2(FALSE)
ids <- speciesPoints %>%
sf::st_intersection(ecoregions)%>%
sf::st_drop_geometry()%>%
dplyr::select("ECO_ID_U")%>%
dplyr::distinct()%>%
pull()
ids
natArea <- ecoregions[ecoregions$ECO_ID_U %in% ids, ]
natArea
qtm(natArea)
tmap_mode("view")
qtm(natArea)
#' Native Area shp
#'
#' @param species
#'
#' @return
#' @export
#'
#' @examples
nat_area_shp <- function(speciesPoints, ecoregions) {
sf::sf_use_s2(FALSE)
if(!crs(speciesPoints) == crs(ecoregions)){
speciesPoints <- sf::st_transform(x = speciesPoints, crs = crs(ecoregions))
}
ids <- speciesPoints %>%
sf::st_intersection(ecoregions)%>%
sf::st_drop_geometry()%>%
dplyr::select("ECO_ID_U")%>%
dplyr::distinct()%>%
pull()
natArea <- ecoregions[ecoregions$ECO_ID_U %in% ids, ]
return(natArea)
}
### define natural area based on ecoregions
natArea <- nat_area_shp(speciesPoints = sp1, ecoregions = ecoregions)
dirs
### natural area
natAreaPath <- paste0(dirs[3], "/naturalArea.gpkg")
### define natural area based on ecoregions
natArea <- nat_area_shp(speciesPoints = sp1, ecoregions = ecoregions)
## select all g points from point object
p1 <- speciesPoints %>% filter(type == "G")
p1
bufferDist
##buffering
buffer <- sf::st_buffer(x = p1, dist = bufferDist )
buffer
qtm(buffer)
## used to define buffer distance in g buffer process in degrees
# 50k(1 degree/111km) = 0.45
bufferDist <- 0.45
##buffering
buffer <- sf::st_buffer(x = p1, dist = bufferDist )
buffer
qtm(buffer)
templateRast <- bioVars[[1]]
# set extent equal to native area
rasters1 <- templateRast %>%
raster::crop(natArea) %>%
raster::mask(natArea)
rasters1
# set extent equal to native area
r1 <- templateRast %>%
raster::crop(natArea) %>%
raster::mask(natArea)
qtm(r1)
##rasterizing and matching cells to predictor layers
buffer_rs <- terra::rasterize(vect(buffer), r1)
buffer_rs
qtm(buffer_rs)
# set extent equal to native area
r1 <- templateRast %>%
terra::crop(natArea) %>%
terra::mask(natArea)
r1
##rasterizing and matching cells to predictor layers
buffer_rs <- terra::rasterize(vect(buffer), r1)
##rasterizing and matching cells to predictor layers
buffer_rs <- terra::rasterize(vect(buffer), r1)%>%
terra::crop(natArea)%>%
terra::mask(natArea)
qtm(buffer_rs)
create_buffers <- function(speciesPoints, natArea, bufferDist, templateRast){
## select all g points from point object
p1 <- speciesPoints %>% filter(type == "G")
#clause to test for G occurrences
if(nrow(p1@data)== 0){
print("there are no g points for this species")
}else{
##buffering
buffer <- sf::st_buffer(x = p1, dist = bufferDist )
# set extent equal to native area
r1 <- templateRast %>%
terra::crop(natArea) %>%
terra::mask(natArea)
##rasterizing and matching cells to predictor layers
buffer_rs <- terra::rasterize(vect(buffer), r1)%>%
terra::crop(natArea)%>%
terra::mask(natArea)
return(buffer_rs)
}
}
## generate GA50 objects
g_buffer <- create_buffers(speciesPoints = sp1,natArea = natArea,
bufferDist = bufferDist,templateRast = templateRast)
## select all g points from point object
p1 <- speciesPoints %>% filter(type == "G")
p1
create_buffers <- function(speciesPoints, natArea, bufferDist, templateRast){
## select all g points from point object
p1 <- speciesPoints %>% filter(type == "G")
#clause to test for G occurrences
if(nrow(p1)== 0){
print("there are no g points for this species")
}else{
##buffering
buffer <- sf::st_buffer(x = p1, dist = bufferDist )
# set extent equal to native area
r1 <- templateRast %>%
terra::crop(natArea) %>%
terra::mask(natArea)
##rasterizing and matching cells to predictor layers
buffer_rs <- terra::rasterize(vect(buffer), r1)%>%
terra::crop(natArea)%>%
terra::mask(natArea)
return(buffer_rs)
}
}
## generate GA50 objects
g_buffer <- create_buffers(speciesPoints = sp1,natArea = natArea,
bufferDist = bufferDist,templateRast = templateRast)
sf::st_area(natArea)
sum(sf::st_area(natArea))
sp1 <- vect(speciesPoints)
sp1 <- vect(speciesPoints)
speciesPoints
sp1 <- terra::vect(speciesPoints)
sp1
vect1 <- terra::vect(speciesPoints)
vect1
terra::extract(x = bioVars,y = vect1)
# generate background points
bg1 <- sf::st_sample(x = natArea, size = 5000)
bg1
class(bg1)
bg1
View(bg1)
class(bg1)
bg1$background <- 1
